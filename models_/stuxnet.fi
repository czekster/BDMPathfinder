STEPS_ORDER
	__ARBRE__;
	default_step;
	check_priorities;
	initialization;
	propagate_effect_S;
	propagate_effect_detected;
	propagate_required_prob;
	propagate_effect_required;
	propagate_leaves;
	tops;
GROUP_NAMES
	simu_group;

OBJECT OPTIONS IS_A GLOBAL_TYPE;
	CONSTANT
	  trimming
		DOMAIN BOOLEAN
		= TRUE;
	  trimming_option
		DOMAIN 'according_to_article' 'maximum'
		= 'maximum';
	  enable_detection
		DOMAIN 'disabled' 'enabled' 'only_aa' 'ongoing_only' 'without_aposteriori' 'final_only'
		= 'enabled';
	  repairable_system
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  priority
		DOMAIN INTEGER
		REINITIALISATION 10;

OBJECT Attack_industrial_system IS_A and_gate;
	INTERFACE
	  sons
		= SCADA_system_compromised Sabotage;
	  fathers
		= successful_attack;
	  triggered_by
		= Network_compromised;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Attack_industrial_system <-- S OF
		  Attack_industrial_system;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF successful_attack) OR (NOT S OF
		  Network_compromised)
		THEN required OF Attack_industrial_system <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF successful_attack AND (NOT S OF
		  successful_attack)
		THEN relevant_evt OF Attack_industrial_system <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (detected OF SCADA_system_compromised OR detected OF
		  Sabotage) OR detected OF successful_attack
		THEN detected OF Attack_industrial_system <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Attack_industrial_system
		THEN final OF Attack_industrial_system <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF Network_compromised AND final OF successful_attack
		THEN final OF Attack_industrial_system <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF (S OF SCADA_system_compromised AND final OF
		  SCADA_system_compromised) AND (S OF Sabotage AND final OF
		  Sabotage)
		THEN S OF Attack_industrial_system <-- TRUE,
		  final OF Attack_industrial_system <-- TRUE;

OBJECT Check_PLC_CFG IS_A aa_leaf;
	INTERFACE
	  fathers
		= PLC_compromised check_config;
	  triggered_by
		= rename_replace_Lib;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Check_PLC_CFG <-- S OF Check_PLC_CFG;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF ((NOT required OF PLC_compromised) AND (NOT required OF
		  check_config)) OR (NOT S OF rename_replace_Lib)
		THEN required OF Check_PLC_CFG <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF PLC_compromised AND (NOT S OF
		  PLC_compromised)) OR (relevant_evt OF check_config AND (NOT
		  S OF check_config))
		THEN relevant_evt OF Check_PLC_CFG <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF PLC_compromised OR detected OF check_config
		THEN detected OF Check_PLC_CFG <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Check_PLC_CFG
		THEN final OF Check_PLC_CFG <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF Check_PLC_CFG = TRUE
		THEN S OF Check_PLC_CFG <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF Check_PLC_CFG = TRUE) AND required OF
		  Check_PLC_CFG
		THEN S OF Check_PLC_CFG <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF Check_PLC_CFG = FALSE) AND (((required OF
		  Check_PLC_CFG AND (NOT detected OF Check_PLC_CFG)) AND (NOT
		  S OF Check_PLC_CFG)) AND relevant_evt OF Check_PLC_CFG)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF Check_PLC_CFG <-- TRUE;
	  success_detected
		IF (aa_success OF Check_PLC_CFG = FALSE) AND (((required OF
		  Check_PLC_CFG AND detected OF Check_PLC_CFG) AND (NOT S OF
		  Check_PLC_CFG)) AND relevant_evt OF Check_PLC_CFG)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF Check_PLC_CFG <-- TRUE;
	  initial_detection
		IF (((((required OF Check_PLC_CFG AND (NOT detected OF
		  Check_PLC_CFG)) AND relevant_evt OF Check_PLC_CFG) AND (NOT
		  flagI OF Check_PLC_CFG)) AND (NOT S OF Check_PLC_CFG)) AND
		  final OF rename_replace_Lib) AND (final OF PLC_compromised
		  AND final OF check_config)
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF Check_PLC_CFG <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF Check_PLC_CFG <-- TRUE;
	  ongoing_detection
		IF ((required OF Check_PLC_CFG AND (NOT detected OF
		  Check_PLC_CFG)) AND relevant_evt OF Check_PLC_CFG) AND (NOT
		  S OF Check_PLC_CFG)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF Check_PLC_CFG <-- TRUE;
	  final_detection
		IF (((required OF Check_PLC_CFG AND (NOT detected OF
		  Check_PLC_CFG)) AND relevant_evt OF Check_PLC_CFG) AND S OF
		  Check_PLC_CFG) AND (NOT flagF OF Check_PLC_CFG)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF Check_PLC_CFG <-- TRUE,
			final OF Check_PLC_CFG <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF Check_PLC_CFG <-- TRUE,
			final OF Check_PLC_CFG <-- TRUE;
	  a_posteriori_detection
		IF ((required OF Check_PLC_CFG AND (NOT detected OF
		  Check_PLC_CFG)) AND relevant_evt OF Check_PLC_CFG) AND S OF
		  Check_PLC_CFG
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF Check_PLC_CFG <-- TRUE;

OBJECT Decrypt_data IS_A ise_leaf;
	INTERFACE
	  fathers
		= infection_fichiers_projets_WinCC_Step7;
	  triggered_by
		= Load_DLL;
	  triggers
		= load_Exec_malware;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  gamma_S_ND
		DOMAIN REAL
		= 0.1;
	  gamma_S_D
		DOMAIN REAL
		= 0.1;
	  gamma_D_NR
		DOMAIN REAL
		= 0;
	  gamma_D_R
		DOMAIN REAL
		= 0;
	  when_to_check
		DOMAIN 'not_req_to_req' 'req_to_not_req'
		= 'not_req_to_req';
	ATTRIBUTE
	  flag
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  ise_nd_real
		LABEL "realization undetected of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	  ise_d_real
		LABEL "realization detected of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Decrypt_data <-- S OF Decrypt_data;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF infection_fichiers_projets_WinCC_Step7) OR (
		  NOT S OF Load_DLL)
		THEN required OF Decrypt_data <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF infection_fichiers_projets_WinCC_Step7 AND (
		  NOT S OF infection_fichiers_projets_WinCC_Step7)) OR (
		  relevant_evt OF load_Exec_malware AND (NOT S OF
		  load_Exec_malware))
		THEN relevant_evt OF Decrypt_data <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF infection_fichiers_projets_WinCC_Step7
		THEN detected OF Decrypt_data <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Decrypt_data
		THEN final OF Decrypt_data <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF (ise_d_real OF Decrypt_data = TRUE) OR (ise_nd_real OF
		  Decrypt_data = TRUE)
		THEN S OF Decrypt_data <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF ((ise_d_real OF Decrypt_data = TRUE) OR (ise_nd_real OF
		  Decrypt_data = TRUE)) AND required OF Decrypt_data
		THEN S OF Decrypt_data <-- TRUE;
	OCCURRENCE
	  real_nd
		IF (ise_nd_real OF Decrypt_data = FALSE) AND ((((((NOT detected
		  OF Decrypt_data) AND (NOT flag OF Decrypt_data)) AND (NOT S
		  OF Decrypt_data)) AND required OF Decrypt_data) AND
		  relevant_evt OF Decrypt_data) AND (final OF Load_DLL OR
		  final OF infection_fichiers_projets_WinCC_Step7))
		MAY_OCCUR
		  FAULT ise_nd_real
		  DIST INS (0.1)
		  INDUCING ise_nd_real OF Decrypt_data <-- TRUE,
			flag OF Decrypt_data <-- TRUE
		OR_ELSE
		  TRANSITION no_realization
		  LABEL "no realization undetected of step %OBJECT"
		  DIST INS (0.9)
		  INDUCING flag OF Decrypt_data <-- TRUE;
	  real_d
		IF (ise_d_real OF Decrypt_data = FALSE) AND (((((detected OF
		  Decrypt_data AND (NOT flag OF Decrypt_data)) AND (NOT S OF
		  Decrypt_data)) AND required OF Decrypt_data) AND
		  relevant_evt OF Decrypt_data) AND (final OF Load_DLL OR
		  final OF infection_fichiers_projets_WinCC_Step7))
		MAY_OCCUR
		  FAULT ise_d_real
		  DIST INS (0.1)
		  INDUCING ise_d_real OF Decrypt_data <-- TRUE,
			flag OF Decrypt_data <-- TRUE
		OR_ELSE
		  TRANSITION no_realization
		  LABEL "no realization detected of step %OBJECT"
		  DIST INS (0.9)
		  INDUCING flag OF Decrypt_data <-- TRUE;
	  det_real
		IF ((((NOT detected OF Decrypt_data) AND flag OF Decrypt_data)
		  AND S OF Decrypt_data) AND required OF Decrypt_data) AND
		  relevant_evt OF Decrypt_data
		MAY_OCCUR
		  TRANSITION ise_real_det
		  LABEL "detection realized of step %OBJECT"
		  DIST INS (0)
		  INDUCING final OF Decrypt_data <-- TRUE
		OR_ELSE
		  TRANSITION ise_real_no_det
		  LABEL "no detection realized of step %OBJECT"
		  DIST INS (1)
		  INDUCING final OF Decrypt_data <-- TRUE;
	  det_not_real
		IF (((((NOT detected OF Decrypt_data) AND flag OF Decrypt_data)
		  AND (NOT S OF Decrypt_data)) AND required OF Decrypt_data)
		  AND (NOT final OF Decrypt_data)) AND relevant_evt OF
		  Decrypt_data
		MAY_OCCUR
		  TRANSITION ise_no_real_det
		  LABEL "detection not realized of step %OBJECT"
		  DIST INS (0)
		  INDUCING final OF Decrypt_data <-- TRUE
		OR_ELSE
		  TRANSITION ise_no_real_no_det
		  LABEL "no detection not realized of step %OBJECT"
		  DIST INS (1)
		  INDUCING final OF Decrypt_data <-- TRUE;

OBJECT Flag_sys_300 IS_A f_leaf;
	INTERFACE
	  fathers
		= sys_300;
	  triggers
		= sys_300;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'disabled';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  waiting_for_rep
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  rep_priority
		DOMAIN INTEGER
		= 1;
	  mu
		DOMAIN REAL
		= 0.1;
	  lambda
		DOMAIN REAL
		= 0.0001;
	  failF_FROZEN
		DOMAIN BOOLEAN
		= TRUE;
	(*FAILURE*)
	ATTRIBUTE
	  failF
		LABEL "failure in operation of %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Flag_sys_300 <-- S OF Flag_sys_300;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF sys_300
		THEN required OF Flag_sys_300 <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF sys_300 AND (NOT S OF sys_300)) OR (
		  relevant_evt OF sys_300 AND (NOT S OF sys_300))
		THEN relevant_evt OF Flag_sys_300 <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Flag_sys_300
		THEN final OF Flag_sys_300 <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF failF OF Flag_sys_300 = TRUE
		THEN S OF Flag_sys_300 <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (failF OF Flag_sys_300 = TRUE) AND required OF Flag_sys_300
		THEN S OF Flag_sys_300 <-- TRUE;
	  get_rep
		GROUP simu_group
		STEP propagate_leaves
		IF (failF OF Flag_sys_300 = TRUE) AND waiting_for_rep OF
		  Flag_sys_300
		THEN waiting_for_rep OF Flag_sys_300 <-- FALSE;

OBJECT Flag_sys_400 IS_A f_leaf;
	INTERFACE
	  fathers
		= syst_400;
	  triggers
		= syst_400;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'disabled';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  waiting_for_rep
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  rep_priority
		DOMAIN INTEGER
		= 1;
	  mu
		DOMAIN REAL
		= 0.1;
	  lambda
		DOMAIN REAL
		= 0.0001;
	  failF_FROZEN
		DOMAIN BOOLEAN
		= TRUE;
	(*FAILURE*)
	ATTRIBUTE
	  failF
		LABEL "failure in operation of %OBJECT"
		DOMAIN BOOLEAN
		= TRUE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Flag_sys_400 <-- S OF Flag_sys_400;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF syst_400
		THEN required OF Flag_sys_400 <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF syst_400 AND (NOT S OF syst_400)) OR (
		  relevant_evt OF syst_400 AND (NOT S OF syst_400))
		THEN relevant_evt OF Flag_sys_400 <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Flag_sys_400
		THEN final OF Flag_sys_400 <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF failF OF Flag_sys_400 = TRUE
		THEN S OF Flag_sys_400 <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (failF OF Flag_sys_400 = TRUE) AND required OF Flag_sys_400
		THEN S OF Flag_sys_400 <-- TRUE;
	  get_rep
		GROUP simu_group
		STEP propagate_leaves
		IF (failF OF Flag_sys_400 = TRUE) AND waiting_for_rep OF
		  Flag_sys_400
		THEN waiting_for_rep OF Flag_sys_400 <-- FALSE;

OBJECT Load_DLL IS_A ise_leaf;
	INTERFACE
	  fathers
		= infection_fichiers_projets_WinCC_Step7;
	  triggered_by
		= ouverture_fichier_projet_par_utilisateur;
	  triggers
		= Decrypt_data;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  gamma_S_ND
		DOMAIN REAL
		= 0.1;
	  gamma_S_D
		DOMAIN REAL
		= 0.1;
	  gamma_D_NR
		DOMAIN REAL
		= 0;
	  gamma_D_R
		DOMAIN REAL
		= 0;
	  when_to_check
		DOMAIN 'not_req_to_req' 'req_to_not_req'
		= 'not_req_to_req';
	ATTRIBUTE
	  flag
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  ise_nd_real
		LABEL "realization undetected of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	  ise_d_real
		LABEL "realization detected of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Load_DLL <-- S OF Load_DLL;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF infection_fichiers_projets_WinCC_Step7) OR (
		  NOT S OF ouverture_fichier_projet_par_utilisateur)
		THEN required OF Load_DLL <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF infection_fichiers_projets_WinCC_Step7 AND (
		  NOT S OF infection_fichiers_projets_WinCC_Step7)) OR (
		  relevant_evt OF Decrypt_data AND (NOT S OF Decrypt_data))
		THEN relevant_evt OF Load_DLL <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF infection_fichiers_projets_WinCC_Step7
		THEN detected OF Load_DLL <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Load_DLL
		THEN final OF Load_DLL <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF (ise_d_real OF Load_DLL = TRUE) OR (ise_nd_real OF Load_DLL
		  = TRUE)
		THEN S OF Load_DLL <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF ((ise_d_real OF Load_DLL = TRUE) OR (ise_nd_real OF Load_DLL
		  = TRUE)) AND required OF Load_DLL
		THEN S OF Load_DLL <-- TRUE;
	OCCURRENCE
	  real_nd
		IF (ise_nd_real OF Load_DLL = FALSE) AND ((((((NOT detected OF
		  Load_DLL) AND (NOT flag OF Load_DLL)) AND (NOT S OF Load_DLL)
		  ) AND required OF Load_DLL) AND relevant_evt OF Load_DLL)
		  AND (final OF ouverture_fichier_projet_par_utilisateur OR
		  final OF infection_fichiers_projets_WinCC_Step7))
		MAY_OCCUR
		  FAULT ise_nd_real
		  DIST INS (0.1)
		  INDUCING ise_nd_real OF Load_DLL <-- TRUE,
			flag OF Load_DLL <-- TRUE
		OR_ELSE
		  TRANSITION no_realization
		  LABEL "no realization undetected of step %OBJECT"
		  DIST INS (0.9)
		  INDUCING flag OF Load_DLL <-- TRUE;
	  real_d
		IF (ise_d_real OF Load_DLL = FALSE) AND (((((detected OF
		  Load_DLL AND (NOT flag OF Load_DLL)) AND (NOT S OF Load_DLL))
		   AND required OF Load_DLL) AND relevant_evt OF Load_DLL) AND
		  (final OF ouverture_fichier_projet_par_utilisateur OR final
		  OF infection_fichiers_projets_WinCC_Step7))
		MAY_OCCUR
		  FAULT ise_d_real
		  DIST INS (0.1)
		  INDUCING ise_d_real OF Load_DLL <-- TRUE,
			flag OF Load_DLL <-- TRUE
		OR_ELSE
		  TRANSITION no_realization
		  LABEL "no realization detected of step %OBJECT"
		  DIST INS (0.9)
		  INDUCING flag OF Load_DLL <-- TRUE;
	  det_real
		IF ((((NOT detected OF Load_DLL) AND flag OF Load_DLL) AND S OF
		  Load_DLL) AND required OF Load_DLL) AND relevant_evt OF
		  Load_DLL
		MAY_OCCUR
		  TRANSITION ise_real_det
		  LABEL "detection realized of step %OBJECT"
		  DIST INS (0)
		  INDUCING final OF Load_DLL <-- TRUE
		OR_ELSE
		  TRANSITION ise_real_no_det
		  LABEL "no detection realized of step %OBJECT"
		  DIST INS (1)
		  INDUCING final OF Load_DLL <-- TRUE;
	  det_not_real
		IF (((((NOT detected OF Load_DLL) AND flag OF Load_DLL) AND (
		  NOT S OF Load_DLL)) AND required OF Load_DLL) AND (NOT final
		  OF Load_DLL)) AND relevant_evt OF Load_DLL
		MAY_OCCUR
		  TRANSITION ise_no_real_det
		  LABEL "detection not realized of step %OBJECT"
		  DIST INS (0)
		  INDUCING final OF Load_DLL <-- TRUE
		OR_ELSE
		  TRANSITION ise_no_real_no_det
		  LABEL "no detection not realized of step %OBJECT"
		  DIST INS (1)
		  INDUCING final OF Load_DLL <-- TRUE;

OBJECT Load_Lib IS_A aa_leaf;
	INTERFACE
	  fathers
		= PLC_compromised;
	  triggered_by
		= check_STEP7_or_WinCC;
	  triggers
		= rename_replace_Lib;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Load_Lib <-- S OF Load_Lib;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF PLC_compromised) OR (NOT S OF
		  check_STEP7_or_WinCC)
		THEN required OF Load_Lib <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF PLC_compromised AND (NOT S OF
		  PLC_compromised)) OR (relevant_evt OF rename_replace_Lib AND
		  (NOT S OF rename_replace_Lib))
		THEN relevant_evt OF Load_Lib <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF PLC_compromised
		THEN detected OF Load_Lib <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Load_Lib
		THEN final OF Load_Lib <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF Load_Lib = TRUE
		THEN S OF Load_Lib <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF Load_Lib = TRUE) AND required OF Load_Lib
		THEN S OF Load_Lib <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF Load_Lib = FALSE) AND (((required OF Load_Lib
		  AND (NOT detected OF Load_Lib)) AND (NOT S OF Load_Lib)) AND
		  relevant_evt OF Load_Lib)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF Load_Lib <-- TRUE;
	  success_detected
		IF (aa_success OF Load_Lib = FALSE) AND (((required OF Load_Lib
		  AND detected OF Load_Lib) AND (NOT S OF Load_Lib)) AND
		  relevant_evt OF Load_Lib)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF Load_Lib <-- TRUE;
	  initial_detection
		IF (((((required OF Load_Lib AND (NOT detected OF Load_Lib))
		  AND relevant_evt OF Load_Lib) AND (NOT flagI OF Load_Lib))
		  AND (NOT S OF Load_Lib)) AND final OF check_STEP7_or_WinCC)
		  AND final OF PLC_compromised
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF Load_Lib <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF Load_Lib <-- TRUE;
	  ongoing_detection
		IF ((required OF Load_Lib AND (NOT detected OF Load_Lib)) AND
		  relevant_evt OF Load_Lib) AND (NOT S OF Load_Lib)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF Load_Lib <-- TRUE;
	  final_detection
		IF (((required OF Load_Lib AND (NOT detected OF Load_Lib)) AND
		  relevant_evt OF Load_Lib) AND S OF Load_Lib) AND (NOT flagF
		  OF Load_Lib)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF Load_Lib <-- TRUE,
			final OF Load_Lib <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF Load_Lib <-- TRUE,
			final OF Load_Lib <-- TRUE;
	  a_posteriori_detection
		IF ((required OF Load_Lib AND (NOT detected OF Load_Lib)) AND
		  relevant_evt OF Load_Lib) AND S OF Load_Lib
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF Load_Lib <-- TRUE;

OBJECT Mise_en_place_serveur_RPC IS_A aa_leaf;
	INTERFACE
	  fathers
		= Proliferation_et_MAJ;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Mise_en_place_serveur_RPC <-- S OF
		  Mise_en_place_serveur_RPC;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF Proliferation_et_MAJ
		THEN required OF Mise_en_place_serveur_RPC <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF Proliferation_et_MAJ AND (NOT S OF
		  Proliferation_et_MAJ)
		THEN relevant_evt OF Mise_en_place_serveur_RPC <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF Proliferation_et_MAJ
		THEN detected OF Mise_en_place_serveur_RPC <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Mise_en_place_serveur_RPC
		THEN final OF Mise_en_place_serveur_RPC <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF Mise_en_place_serveur_RPC = TRUE
		THEN S OF Mise_en_place_serveur_RPC <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF Mise_en_place_serveur_RPC = TRUE) AND
		  required OF Mise_en_place_serveur_RPC
		THEN S OF Mise_en_place_serveur_RPC <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF Mise_en_place_serveur_RPC = FALSE) AND (((
		  required OF Mise_en_place_serveur_RPC AND (NOT detected OF
		  Mise_en_place_serveur_RPC)) AND (NOT S OF
		  Mise_en_place_serveur_RPC)) AND relevant_evt OF
		  Mise_en_place_serveur_RPC)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF Mise_en_place_serveur_RPC <-- TRUE;
	  success_detected
		IF (aa_success OF Mise_en_place_serveur_RPC = FALSE) AND (((
		  required OF Mise_en_place_serveur_RPC AND detected OF
		  Mise_en_place_serveur_RPC) AND (NOT S OF
		  Mise_en_place_serveur_RPC)) AND relevant_evt OF
		  Mise_en_place_serveur_RPC)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF Mise_en_place_serveur_RPC <-- TRUE;
	  initial_detection
		IF ((((required OF Mise_en_place_serveur_RPC AND (NOT detected
		  OF Mise_en_place_serveur_RPC)) AND relevant_evt OF
		  Mise_en_place_serveur_RPC) AND (NOT flagI OF
		  Mise_en_place_serveur_RPC)) AND (NOT S OF
		  Mise_en_place_serveur_RPC)) AND final OF
		  Proliferation_et_MAJ
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF Mise_en_place_serveur_RPC <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF Mise_en_place_serveur_RPC <-- TRUE;
	  ongoing_detection
		IF ((required OF Mise_en_place_serveur_RPC AND (NOT detected OF
		  Mise_en_place_serveur_RPC)) AND relevant_evt OF
		  Mise_en_place_serveur_RPC) AND (NOT S OF
		  Mise_en_place_serveur_RPC)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF Mise_en_place_serveur_RPC <-- TRUE;
	  final_detection
		IF (((required OF Mise_en_place_serveur_RPC AND (NOT detected
		  OF Mise_en_place_serveur_RPC)) AND relevant_evt OF
		  Mise_en_place_serveur_RPC) AND S OF
		  Mise_en_place_serveur_RPC) AND (NOT flagF OF
		  Mise_en_place_serveur_RPC)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF Mise_en_place_serveur_RPC <-- TRUE,
			final OF Mise_en_place_serveur_RPC <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF Mise_en_place_serveur_RPC <-- TRUE,
			final OF Mise_en_place_serveur_RPC <-- TRUE;
	  a_posteriori_detection
		IF ((required OF Mise_en_place_serveur_RPC AND (NOT detected OF
		  Mise_en_place_serveur_RPC)) AND relevant_evt OF
		  Mise_en_place_serveur_RPC) AND S OF
		  Mise_en_place_serveur_RPC
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF Mise_en_place_serveur_RPC <-- TRUE;

OBJECT Modification_systeme IS_A and_gate;
	INTERFACE
	  sons
		= filtrer_fichier.lnk inject_code_processus install_pilotes_syst_signes;
	  fathers
		= self_installation;
	  triggered_by
		= systeme_Windows_infecte;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Modification_systeme <-- S OF
		  Modification_systeme;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF self_installation) OR (NOT S OF
		  systeme_Windows_infecte)
		THEN required OF Modification_systeme <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF self_installation AND (NOT S OF
		  self_installation)
		THEN relevant_evt OF Modification_systeme <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF ((detected OF filtrer_fichier.lnk OR detected OF
		  inject_code_processus) OR detected OF
		  install_pilotes_syst_signes) OR detected OF
		  self_installation
		THEN detected OF Modification_systeme <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Modification_systeme
		THEN final OF Modification_systeme <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF systeme_Windows_infecte AND final OF
		  self_installation
		THEN final OF Modification_systeme <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF ((S OF filtrer_fichier.lnk AND final OF filtrer_fichier.lnk)
		  AND (S OF inject_code_processus AND final OF
		  inject_code_processus)) AND (S OF
		  install_pilotes_syst_signes AND final OF
		  install_pilotes_syst_signes)
		THEN S OF Modification_systeme <-- TRUE,
		  final OF Modification_systeme <-- TRUE;

OBJECT Network_compromised IS_A and_gate;
	INTERFACE
	  sons
		= infiltration self_installation;
	  fathers
		= successful_attack;
	  triggers
		= Attack_industrial_system;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Network_compromised <-- S OF
		  Network_compromised;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF successful_attack
		THEN required OF Network_compromised <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF successful_attack AND (NOT S OF
		  successful_attack)) OR (relevant_evt OF
		  Attack_industrial_system AND (NOT S OF
		  Attack_industrial_system))
		THEN relevant_evt OF Network_compromised <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (detected OF infiltration OR detected OF self_installation)
		  OR detected OF successful_attack
		THEN detected OF Network_compromised <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Network_compromised
		THEN final OF Network_compromised <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF successful_attack
		THEN final OF Network_compromised <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF (S OF infiltration AND final OF infiltration) AND (S OF
		  self_installation AND final OF self_installation)
		THEN S OF Network_compromised <-- TRUE,
		  final OF Network_compromised <-- TRUE;

OBJECT Network_shares IS_A aa_leaf;
	INTERFACE
	  fathers
		= via_LAN;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Network_shares <-- S OF Network_shares;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF via_LAN
		THEN required OF Network_shares <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF via_LAN AND (NOT S OF via_LAN)
		THEN relevant_evt OF Network_shares <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF via_LAN
		THEN detected OF Network_shares <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Network_shares
		THEN final OF Network_shares <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF Network_shares = TRUE
		THEN S OF Network_shares <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF Network_shares = TRUE) AND required OF
		  Network_shares
		THEN S OF Network_shares <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF Network_shares = FALSE) AND (((required OF
		  Network_shares AND (NOT detected OF Network_shares)) AND (
		  NOT S OF Network_shares)) AND relevant_evt OF Network_shares)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF Network_shares <-- TRUE;
	  success_detected
		IF (aa_success OF Network_shares = FALSE) AND (((required OF
		  Network_shares AND detected OF Network_shares) AND (NOT S OF
		  Network_shares)) AND relevant_evt OF Network_shares)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF Network_shares <-- TRUE;
	  initial_detection
		IF ((((required OF Network_shares AND (NOT detected OF
		  Network_shares)) AND relevant_evt OF Network_shares) AND (
		  NOT flagI OF Network_shares)) AND (NOT S OF Network_shares))
		  AND final OF via_LAN
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF Network_shares <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF Network_shares <-- TRUE;
	  ongoing_detection
		IF ((required OF Network_shares AND (NOT detected OF
		  Network_shares)) AND relevant_evt OF Network_shares) AND (
		  NOT S OF Network_shares)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF Network_shares <-- TRUE;
	  final_detection
		IF (((required OF Network_shares AND (NOT detected OF
		  Network_shares)) AND relevant_evt OF Network_shares) AND S
		  OF Network_shares) AND (NOT flagF OF Network_shares)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF Network_shares <-- TRUE,
			final OF Network_shares <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF Network_shares <-- TRUE,
			final OF Network_shares <-- TRUE;
	  a_posteriori_detection
		IF ((required OF Network_shares AND (NOT detected OF
		  Network_shares)) AND relevant_evt OF Network_shares) AND S
		  OF Network_shares
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF Network_shares <-- TRUE;

OBJECT PLC_compromised IS_A and_gate;
	INTERFACE
	  sons
		= Check_PLC_CFG Load_Lib check_STEP7_or_WinCC modify_PLC_function_bloks rename_replace_Lib;
	  fathers
		= SCADA_system_compromised;
	  triggered_by
		= connection_PC_infecte_au_PLC;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF PLC_compromised <-- S OF PLC_compromised;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF SCADA_system_compromised) OR (NOT S OF
		  connection_PC_infecte_au_PLC)
		THEN required OF PLC_compromised <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF SCADA_system_compromised AND (NOT S OF
		  SCADA_system_compromised)
		THEN relevant_evt OF PLC_compromised <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF ((((detected OF Check_PLC_CFG OR detected OF Load_Lib) OR
		  detected OF check_STEP7_or_WinCC) OR detected OF
		  modify_PLC_function_bloks) OR detected OF rename_replace_Lib)
		   OR detected OF SCADA_system_compromised
		THEN detected OF PLC_compromised <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF PLC_compromised
		THEN final OF PLC_compromised <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF connection_PC_infecte_au_PLC AND final OF
		  SCADA_system_compromised
		THEN final OF PLC_compromised <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF ((((S OF Check_PLC_CFG AND final OF Check_PLC_CFG) AND (S OF
		  Load_Lib AND final OF Load_Lib)) AND (S OF
		  check_STEP7_or_WinCC AND final OF check_STEP7_or_WinCC)) AND
		  (S OF modify_PLC_function_bloks AND final OF
		  modify_PLC_function_bloks)) AND (S OF rename_replace_Lib AND
		  final OF rename_replace_Lib)
		THEN S OF PLC_compromised <-- TRUE,
		  final OF PLC_compromised <-- TRUE;

OBJECT PLC_envoie_donnees_falcifiees_aux_variateurs IS_A aa_leaf;
	INTERFACE
	  fathers
		= sys_300;
	  triggered_by
		= collecte_de_donnees;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF PLC_envoie_donnees_falcifiees_aux_variateurs
		  <-- S OF PLC_envoie_donnees_falcifiees_aux_variateurs;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF sys_300) OR (NOT S OF collecte_de_donnees)
		THEN required OF PLC_envoie_donnees_falcifiees_aux_variateurs
		  <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF sys_300 AND (NOT S OF sys_300)
		THEN relevant_evt OF
		  PLC_envoie_donnees_falcifiees_aux_variateurs <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF sys_300
		THEN detected OF PLC_envoie_donnees_falcifiees_aux_variateurs
		  <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF PLC_envoie_donnees_falcifiees_aux_variateurs
		THEN final OF PLC_envoie_donnees_falcifiees_aux_variateurs <--
		  TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF PLC_envoie_donnees_falcifiees_aux_variateurs =
		  TRUE
		THEN S OF PLC_envoie_donnees_falcifiees_aux_variateurs <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF PLC_envoie_donnees_falcifiees_aux_variateurs
		  = TRUE) AND required OF
		  PLC_envoie_donnees_falcifiees_aux_variateurs
		THEN S OF PLC_envoie_donnees_falcifiees_aux_variateurs <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF PLC_envoie_donnees_falcifiees_aux_variateurs
		  = FALSE) AND (((required OF
		  PLC_envoie_donnees_falcifiees_aux_variateurs AND (NOT
		  detected OF PLC_envoie_donnees_falcifiees_aux_variateurs))
		  AND (NOT S OF PLC_envoie_donnees_falcifiees_aux_variateurs))
		  AND relevant_evt OF
		  PLC_envoie_donnees_falcifiees_aux_variateurs)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF
			PLC_envoie_donnees_falcifiees_aux_variateurs <-- TRUE;
	  success_detected
		IF (aa_success OF PLC_envoie_donnees_falcifiees_aux_variateurs
		  = FALSE) AND (((required OF
		  PLC_envoie_donnees_falcifiees_aux_variateurs AND detected OF
		  PLC_envoie_donnees_falcifiees_aux_variateurs) AND (NOT S OF
		  PLC_envoie_donnees_falcifiees_aux_variateurs)) AND
		  relevant_evt OF PLC_envoie_donnees_falcifiees_aux_variateurs)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF
			PLC_envoie_donnees_falcifiees_aux_variateurs <-- TRUE;
	  initial_detection
		IF (((((required OF
		  PLC_envoie_donnees_falcifiees_aux_variateurs AND (NOT
		  detected OF PLC_envoie_donnees_falcifiees_aux_variateurs))
		  AND relevant_evt OF
		  PLC_envoie_donnees_falcifiees_aux_variateurs) AND (NOT flagI
		  OF PLC_envoie_donnees_falcifiees_aux_variateurs)) AND (NOT S
		  OF PLC_envoie_donnees_falcifiees_aux_variateurs)) AND final
		  OF collecte_de_donnees) AND final OF sys_300
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF
			PLC_envoie_donnees_falcifiees_aux_variateurs <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF
			PLC_envoie_donnees_falcifiees_aux_variateurs <-- TRUE;
	  ongoing_detection
		IF ((required OF PLC_envoie_donnees_falcifiees_aux_variateurs
		  AND (NOT detected OF
		  PLC_envoie_donnees_falcifiees_aux_variateurs)) AND
		  relevant_evt OF PLC_envoie_donnees_falcifiees_aux_variateurs)
		   AND (NOT S OF PLC_envoie_donnees_falcifiees_aux_variateurs)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF
			PLC_envoie_donnees_falcifiees_aux_variateurs <-- TRUE;
	  final_detection
		IF (((required OF PLC_envoie_donnees_falcifiees_aux_variateurs
		  AND (NOT detected OF
		  PLC_envoie_donnees_falcifiees_aux_variateurs)) AND
		  relevant_evt OF PLC_envoie_donnees_falcifiees_aux_variateurs)
		   AND S OF PLC_envoie_donnees_falcifiees_aux_variateurs) AND (
		  NOT flagF OF PLC_envoie_donnees_falcifiees_aux_variateurs)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF
			PLC_envoie_donnees_falcifiees_aux_variateurs <-- TRUE,
			final OF PLC_envoie_donnees_falcifiees_aux_variateurs <--
			TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF
			PLC_envoie_donnees_falcifiees_aux_variateurs <-- TRUE,
			final OF PLC_envoie_donnees_falcifiees_aux_variateurs <--
			TRUE;
	  a_posteriori_detection
		IF ((required OF PLC_envoie_donnees_falcifiees_aux_variateurs
		  AND (NOT detected OF
		  PLC_envoie_donnees_falcifiees_aux_variateurs)) AND
		  relevant_evt OF PLC_envoie_donnees_falcifiees_aux_variateurs)
		   AND S OF PLC_envoie_donnees_falcifiees_aux_variateurs
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF
			PLC_envoie_donnees_falcifiees_aux_variateurs <-- TRUE;

OBJECT Printer_servers IS_A aa_leaf;
	INTERFACE
	  fathers
		= via_LAN;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Printer_servers <-- S OF Printer_servers;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF via_LAN
		THEN required OF Printer_servers <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF via_LAN AND (NOT S OF via_LAN)
		THEN relevant_evt OF Printer_servers <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF via_LAN
		THEN detected OF Printer_servers <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Printer_servers
		THEN final OF Printer_servers <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF Printer_servers = TRUE
		THEN S OF Printer_servers <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF Printer_servers = TRUE) AND required OF
		  Printer_servers
		THEN S OF Printer_servers <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF Printer_servers = FALSE) AND (((required OF
		  Printer_servers AND (NOT detected OF Printer_servers)) AND (
		  NOT S OF Printer_servers)) AND relevant_evt OF
		  Printer_servers)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF Printer_servers <-- TRUE;
	  success_detected
		IF (aa_success OF Printer_servers = FALSE) AND (((required OF
		  Printer_servers AND detected OF Printer_servers) AND (NOT S
		  OF Printer_servers)) AND relevant_evt OF Printer_servers)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF Printer_servers <-- TRUE;
	  initial_detection
		IF ((((required OF Printer_servers AND (NOT detected OF
		  Printer_servers)) AND relevant_evt OF Printer_servers) AND (
		  NOT flagI OF Printer_servers)) AND (NOT S OF Printer_servers)
		  ) AND final OF via_LAN
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF Printer_servers <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF Printer_servers <-- TRUE;
	  ongoing_detection
		IF ((required OF Printer_servers AND (NOT detected OF
		  Printer_servers)) AND relevant_evt OF Printer_servers) AND (
		  NOT S OF Printer_servers)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF Printer_servers <-- TRUE;
	  final_detection
		IF (((required OF Printer_servers AND (NOT detected OF
		  Printer_servers)) AND relevant_evt OF Printer_servers) AND S
		  OF Printer_servers) AND (NOT flagF OF Printer_servers)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF Printer_servers <-- TRUE,
			final OF Printer_servers <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF Printer_servers <-- TRUE,
			final OF Printer_servers <-- TRUE;
	  a_posteriori_detection
		IF ((required OF Printer_servers AND (NOT detected OF
		  Printer_servers)) AND relevant_evt OF Printer_servers) AND S
		  OF Printer_servers
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF Printer_servers <-- TRUE;

OBJECT Proliferation_et_MAJ IS_A or_gate;
	INTERFACE
	  sons
		= Mise_en_place_serveur_RPC communication_P2P communication_avec_serveur_CC;
	  fathers
		= execution_module_principal;
	  triggered_by
		= lancer_rootkit;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Proliferation_et_MAJ <-- S OF
		  Proliferation_et_MAJ;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF execution_module_principal) OR (NOT S OF
		  lancer_rootkit)
		THEN required OF Proliferation_et_MAJ <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF execution_module_principal AND (NOT S OF
		  execution_module_principal)
		THEN relevant_evt OF Proliferation_et_MAJ <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF ((detected OF Mise_en_place_serveur_RPC OR detected OF
		  communication_P2P) OR detected OF
		  communication_avec_serveur_CC) OR detected OF
		  execution_module_principal
		THEN detected OF Proliferation_et_MAJ <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Proliferation_et_MAJ
		THEN final OF Proliferation_et_MAJ <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF lancer_rootkit AND final OF
		  execution_module_principal
		THEN final OF Proliferation_et_MAJ <-- TRUE;
	  or
		GROUP simu_group
		STEP propagate_effect_S
		IF ((S OF Mise_en_place_serveur_RPC AND final OF
		  Mise_en_place_serveur_RPC) OR (S OF communication_P2P AND
		  final OF communication_P2P)) OR (S OF
		  communication_avec_serveur_CC AND final OF
		  communication_avec_serveur_CC)
		THEN S OF Proliferation_et_MAJ <-- TRUE,
		  final OF Proliferation_et_MAJ <-- TRUE;

OBJECT SCADA_system_compromised IS_A and_gate;
	INTERFACE
	  sons
		= PLC_compromised check_config connection_PC_infecte_au_PLC;
	  fathers
		= Attack_industrial_system;
	  triggers
		= prise_en_main_signaux_controle_par_pirate;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF SCADA_system_compromised <-- S OF
		  SCADA_system_compromised;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF Attack_industrial_system
		THEN required OF SCADA_system_compromised <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF Attack_industrial_system AND (NOT S OF
		  Attack_industrial_system)) OR (relevant_evt OF
		  prise_en_main_signaux_controle_par_pirate AND (NOT S OF
		  prise_en_main_signaux_controle_par_pirate))
		THEN relevant_evt OF SCADA_system_compromised <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF ((detected OF PLC_compromised OR detected OF check_config)
		  OR detected OF connection_PC_infecte_au_PLC) OR detected OF
		  Attack_industrial_system
		THEN detected OF SCADA_system_compromised <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF SCADA_system_compromised
		THEN final OF SCADA_system_compromised <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF Attack_industrial_system
		THEN final OF SCADA_system_compromised <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF ((S OF PLC_compromised AND final OF PLC_compromised) AND (S
		  OF check_config AND final OF check_config)) AND (S OF
		  connection_PC_infecte_au_PLC AND final OF
		  connection_PC_infecte_au_PLC)
		THEN S OF SCADA_system_compromised <-- TRUE,
		  final OF SCADA_system_compromised <-- TRUE;

OBJECT STEP7_Project_Fiels IS_A aa_leaf;
	INTERFACE
	  fathers
		= via_Simens_Project_Files;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF STEP7_Project_Fiels <-- S OF
		  STEP7_Project_Fiels;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF via_Simens_Project_Files
		THEN required OF STEP7_Project_Fiels <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF via_Simens_Project_Files AND (NOT S OF
		  via_Simens_Project_Files)
		THEN relevant_evt OF STEP7_Project_Fiels <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF via_Simens_Project_Files
		THEN detected OF STEP7_Project_Fiels <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF STEP7_Project_Fiels
		THEN final OF STEP7_Project_Fiels <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF STEP7_Project_Fiels = TRUE
		THEN S OF STEP7_Project_Fiels <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF STEP7_Project_Fiels = TRUE) AND required OF
		  STEP7_Project_Fiels
		THEN S OF STEP7_Project_Fiels <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF STEP7_Project_Fiels = FALSE) AND (((required
		  OF STEP7_Project_Fiels AND (NOT detected OF
		  STEP7_Project_Fiels)) AND (NOT S OF STEP7_Project_Fiels))
		  AND relevant_evt OF STEP7_Project_Fiels)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF STEP7_Project_Fiels <-- TRUE;
	  success_detected
		IF (aa_success OF STEP7_Project_Fiels = FALSE) AND (((required
		  OF STEP7_Project_Fiels AND detected OF STEP7_Project_Fiels)
		  AND (NOT S OF STEP7_Project_Fiels)) AND relevant_evt OF
		  STEP7_Project_Fiels)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF STEP7_Project_Fiels <-- TRUE;
	  initial_detection
		IF ((((required OF STEP7_Project_Fiels AND (NOT detected OF
		  STEP7_Project_Fiels)) AND relevant_evt OF
		  STEP7_Project_Fiels) AND (NOT flagI OF STEP7_Project_Fiels))
		  AND (NOT S OF STEP7_Project_Fiels)) AND final OF
		  via_Simens_Project_Files
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF STEP7_Project_Fiels <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF STEP7_Project_Fiels <-- TRUE;
	  ongoing_detection
		IF ((required OF STEP7_Project_Fiels AND (NOT detected OF
		  STEP7_Project_Fiels)) AND relevant_evt OF
		  STEP7_Project_Fiels) AND (NOT S OF STEP7_Project_Fiels)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF STEP7_Project_Fiels <-- TRUE;
	  final_detection
		IF (((required OF STEP7_Project_Fiels AND (NOT detected OF
		  STEP7_Project_Fiels)) AND relevant_evt OF
		  STEP7_Project_Fiels) AND S OF STEP7_Project_Fiels) AND (NOT
		  flagF OF STEP7_Project_Fiels)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF STEP7_Project_Fiels <-- TRUE,
			final OF STEP7_Project_Fiels <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF STEP7_Project_Fiels <-- TRUE,
			final OF STEP7_Project_Fiels <-- TRUE;
	  a_posteriori_detection
		IF ((required OF STEP7_Project_Fiels AND (NOT detected OF
		  STEP7_Project_Fiels)) AND relevant_evt OF
		  STEP7_Project_Fiels) AND S OF STEP7_Project_Fiels
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF STEP7_Project_Fiels <-- TRUE;

OBJECT Sabotage IS_A and_gate;
	INTERFACE
	  sons
		= destruction_ralentissement prise_en_main_signaux_controle_par_pirate;
	  fathers
		= Attack_industrial_system;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Sabotage <-- S OF Sabotage;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF Attack_industrial_system
		THEN required OF Sabotage <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF Attack_industrial_system AND (NOT S OF
		  Attack_industrial_system)
		THEN relevant_evt OF Sabotage <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (detected OF destruction_ralentissement OR detected OF
		  prise_en_main_signaux_controle_par_pirate) OR detected OF
		  Attack_industrial_system
		THEN detected OF Sabotage <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Sabotage
		THEN final OF Sabotage <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF Attack_industrial_system
		THEN final OF Sabotage <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF (S OF destruction_ralentissement AND final OF
		  destruction_ralentissement) AND (S OF
		  prise_en_main_signaux_controle_par_pirate AND final OF
		  prise_en_main_signaux_controle_par_pirate)
		THEN S OF Sabotage <-- TRUE,
		  final OF Sabotage <-- TRUE;

OBJECT Service_Server_RPC IS_A aa_leaf;
	INTERFACE
	  fathers
		= via_LAN;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Service_Server_RPC <-- S OF
		  Service_Server_RPC;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF via_LAN
		THEN required OF Service_Server_RPC <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF via_LAN AND (NOT S OF via_LAN)
		THEN relevant_evt OF Service_Server_RPC <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF via_LAN
		THEN detected OF Service_Server_RPC <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Service_Server_RPC
		THEN final OF Service_Server_RPC <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF Service_Server_RPC = TRUE
		THEN S OF Service_Server_RPC <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF Service_Server_RPC = TRUE) AND required OF
		  Service_Server_RPC
		THEN S OF Service_Server_RPC <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF Service_Server_RPC = FALSE) AND (((required
		  OF Service_Server_RPC AND (NOT detected OF
		  Service_Server_RPC)) AND (NOT S OF Service_Server_RPC)) AND
		  relevant_evt OF Service_Server_RPC)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF Service_Server_RPC <-- TRUE;
	  success_detected
		IF (aa_success OF Service_Server_RPC = FALSE) AND (((required
		  OF Service_Server_RPC AND detected OF Service_Server_RPC)
		  AND (NOT S OF Service_Server_RPC)) AND relevant_evt OF
		  Service_Server_RPC)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF Service_Server_RPC <-- TRUE;
	  initial_detection
		IF ((((required OF Service_Server_RPC AND (NOT detected OF
		  Service_Server_RPC)) AND relevant_evt OF Service_Server_RPC)
		  AND (NOT flagI OF Service_Server_RPC)) AND (NOT S OF
		  Service_Server_RPC)) AND final OF via_LAN
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF Service_Server_RPC <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF Service_Server_RPC <-- TRUE;
	  ongoing_detection
		IF ((required OF Service_Server_RPC AND (NOT detected OF
		  Service_Server_RPC)) AND relevant_evt OF Service_Server_RPC)
		  AND (NOT S OF Service_Server_RPC)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF Service_Server_RPC <-- TRUE;
	  final_detection
		IF (((required OF Service_Server_RPC AND (NOT detected OF
		  Service_Server_RPC)) AND relevant_evt OF Service_Server_RPC)
		  AND S OF Service_Server_RPC) AND (NOT flagF OF
		  Service_Server_RPC)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF Service_Server_RPC <-- TRUE,
			final OF Service_Server_RPC <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF Service_Server_RPC <-- TRUE,
			final OF Service_Server_RPC <-- TRUE;
	  a_posteriori_detection
		IF ((required OF Service_Server_RPC AND (NOT detected OF
		  Service_Server_RPC)) AND relevant_evt OF Service_Server_RPC)
		  AND S OF Service_Server_RPC
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF Service_Server_RPC <-- TRUE;

OBJECT Stuxnet IS_A undes_event;
	INTERFACE
	  sons
		= successful_attack;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= TRUE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= TRUE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Stuxnet <-- S OF Stuxnet;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		THEN relevant_evt OF Stuxnet <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF successful_attack
		THEN detected OF Stuxnet <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Stuxnet
		THEN final OF Stuxnet <-- TRUE;
	  final_S
		STEP propagate_effect_S
		IF S OF successful_attack
		THEN S OF Stuxnet <-- TRUE;
	  final_det
		STEP propagate_effect_detected
		IF detected OF successful_attack
		THEN detected OF Stuxnet <-- TRUE;

OBJECT WinCC_SQL_ServerDB IS_A aa_leaf;
	INTERFACE
	  fathers
		= via_Simens_Project_Files;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF WinCC_SQL_ServerDB <-- S OF
		  WinCC_SQL_ServerDB;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF via_Simens_Project_Files
		THEN required OF WinCC_SQL_ServerDB <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF via_Simens_Project_Files AND (NOT S OF
		  via_Simens_Project_Files)
		THEN relevant_evt OF WinCC_SQL_ServerDB <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF via_Simens_Project_Files
		THEN detected OF WinCC_SQL_ServerDB <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF WinCC_SQL_ServerDB
		THEN final OF WinCC_SQL_ServerDB <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF WinCC_SQL_ServerDB = TRUE
		THEN S OF WinCC_SQL_ServerDB <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF WinCC_SQL_ServerDB = TRUE) AND required OF
		  WinCC_SQL_ServerDB
		THEN S OF WinCC_SQL_ServerDB <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF WinCC_SQL_ServerDB = FALSE) AND (((required
		  OF WinCC_SQL_ServerDB AND (NOT detected OF
		  WinCC_SQL_ServerDB)) AND (NOT S OF WinCC_SQL_ServerDB)) AND
		  relevant_evt OF WinCC_SQL_ServerDB)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF WinCC_SQL_ServerDB <-- TRUE;
	  success_detected
		IF (aa_success OF WinCC_SQL_ServerDB = FALSE) AND (((required
		  OF WinCC_SQL_ServerDB AND detected OF WinCC_SQL_ServerDB)
		  AND (NOT S OF WinCC_SQL_ServerDB)) AND relevant_evt OF
		  WinCC_SQL_ServerDB)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF WinCC_SQL_ServerDB <-- TRUE;
	  initial_detection
		IF ((((required OF WinCC_SQL_ServerDB AND (NOT detected OF
		  WinCC_SQL_ServerDB)) AND relevant_evt OF WinCC_SQL_ServerDB)
		  AND (NOT flagI OF WinCC_SQL_ServerDB)) AND (NOT S OF
		  WinCC_SQL_ServerDB)) AND final OF via_Simens_Project_Files
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF WinCC_SQL_ServerDB <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF WinCC_SQL_ServerDB <-- TRUE;
	  ongoing_detection
		IF ((required OF WinCC_SQL_ServerDB AND (NOT detected OF
		  WinCC_SQL_ServerDB)) AND relevant_evt OF WinCC_SQL_ServerDB)
		  AND (NOT S OF WinCC_SQL_ServerDB)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF WinCC_SQL_ServerDB <-- TRUE;
	  final_detection
		IF (((required OF WinCC_SQL_ServerDB AND (NOT detected OF
		  WinCC_SQL_ServerDB)) AND relevant_evt OF WinCC_SQL_ServerDB)
		  AND S OF WinCC_SQL_ServerDB) AND (NOT flagF OF
		  WinCC_SQL_ServerDB)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF WinCC_SQL_ServerDB <-- TRUE,
			final OF WinCC_SQL_ServerDB <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF WinCC_SQL_ServerDB <-- TRUE,
			final OF WinCC_SQL_ServerDB <-- TRUE;
	  a_posteriori_detection
		IF ((required OF WinCC_SQL_ServerDB AND (NOT detected OF
		  WinCC_SQL_ServerDB)) AND relevant_evt OF WinCC_SQL_ServerDB)
		  AND S OF WinCC_SQL_ServerDB
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF WinCC_SQL_ServerDB <-- TRUE;

OBJECT Win_Shell_Link_files_vuln IS_A aa_leaf;
	INTERFACE
	  fathers
		= windows_vuln_exploitation;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF Win_Shell_Link_files_vuln <-- S OF
		  Win_Shell_Link_files_vuln;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF windows_vuln_exploitation
		THEN required OF Win_Shell_Link_files_vuln <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF windows_vuln_exploitation AND (NOT S OF
		  windows_vuln_exploitation)
		THEN relevant_evt OF Win_Shell_Link_files_vuln <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF windows_vuln_exploitation
		THEN detected OF Win_Shell_Link_files_vuln <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF Win_Shell_Link_files_vuln
		THEN final OF Win_Shell_Link_files_vuln <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF Win_Shell_Link_files_vuln = TRUE
		THEN S OF Win_Shell_Link_files_vuln <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF Win_Shell_Link_files_vuln = TRUE) AND
		  required OF Win_Shell_Link_files_vuln
		THEN S OF Win_Shell_Link_files_vuln <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF Win_Shell_Link_files_vuln = FALSE) AND (((
		  required OF Win_Shell_Link_files_vuln AND (NOT detected OF
		  Win_Shell_Link_files_vuln)) AND (NOT S OF
		  Win_Shell_Link_files_vuln)) AND relevant_evt OF
		  Win_Shell_Link_files_vuln)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF Win_Shell_Link_files_vuln <-- TRUE;
	  success_detected
		IF (aa_success OF Win_Shell_Link_files_vuln = FALSE) AND (((
		  required OF Win_Shell_Link_files_vuln AND detected OF
		  Win_Shell_Link_files_vuln) AND (NOT S OF
		  Win_Shell_Link_files_vuln)) AND relevant_evt OF
		  Win_Shell_Link_files_vuln)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF Win_Shell_Link_files_vuln <-- TRUE;
	  initial_detection
		IF ((((required OF Win_Shell_Link_files_vuln AND (NOT detected
		  OF Win_Shell_Link_files_vuln)) AND relevant_evt OF
		  Win_Shell_Link_files_vuln) AND (NOT flagI OF
		  Win_Shell_Link_files_vuln)) AND (NOT S OF
		  Win_Shell_Link_files_vuln)) AND final OF
		  windows_vuln_exploitation
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF Win_Shell_Link_files_vuln <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF Win_Shell_Link_files_vuln <-- TRUE;
	  ongoing_detection
		IF ((required OF Win_Shell_Link_files_vuln AND (NOT detected OF
		  Win_Shell_Link_files_vuln)) AND relevant_evt OF
		  Win_Shell_Link_files_vuln) AND (NOT S OF
		  Win_Shell_Link_files_vuln)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF Win_Shell_Link_files_vuln <-- TRUE;
	  final_detection
		IF (((required OF Win_Shell_Link_files_vuln AND (NOT detected
		  OF Win_Shell_Link_files_vuln)) AND relevant_evt OF
		  Win_Shell_Link_files_vuln) AND S OF
		  Win_Shell_Link_files_vuln) AND (NOT flagF OF
		  Win_Shell_Link_files_vuln)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF Win_Shell_Link_files_vuln <-- TRUE,
			final OF Win_Shell_Link_files_vuln <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF Win_Shell_Link_files_vuln <-- TRUE,
			final OF Win_Shell_Link_files_vuln <-- TRUE;
	  a_posteriori_detection
		IF ((required OF Win_Shell_Link_files_vuln AND (NOT detected OF
		  Win_Shell_Link_files_vuln)) AND relevant_evt OF
		  Win_Shell_Link_files_vuln) AND S OF
		  Win_Shell_Link_files_vuln
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF Win_Shell_Link_files_vuln <-- TRUE;

OBJECT autorun.inf_vuln IS_A aa_leaf;
	INTERFACE
	  fathers
		= windows_vuln_exploitation;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF autorun.inf_vuln <-- S OF autorun.inf_vuln;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF windows_vuln_exploitation
		THEN required OF autorun.inf_vuln <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF windows_vuln_exploitation AND (NOT S OF
		  windows_vuln_exploitation)
		THEN relevant_evt OF autorun.inf_vuln <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF windows_vuln_exploitation
		THEN detected OF autorun.inf_vuln <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF autorun.inf_vuln
		THEN final OF autorun.inf_vuln <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF autorun.inf_vuln = TRUE
		THEN S OF autorun.inf_vuln <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF autorun.inf_vuln = TRUE) AND required OF
		  autorun.inf_vuln
		THEN S OF autorun.inf_vuln <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF autorun.inf_vuln = FALSE) AND (((required OF
		  autorun.inf_vuln AND (NOT detected OF autorun.inf_vuln)) AND
		  (NOT S OF autorun.inf_vuln)) AND relevant_evt OF
		  autorun.inf_vuln)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF autorun.inf_vuln <-- TRUE;
	  success_detected
		IF (aa_success OF autorun.inf_vuln = FALSE) AND (((required OF
		  autorun.inf_vuln AND detected OF autorun.inf_vuln) AND (NOT
		  S OF autorun.inf_vuln)) AND relevant_evt OF autorun.inf_vuln)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF autorun.inf_vuln <-- TRUE;
	  initial_detection
		IF ((((required OF autorun.inf_vuln AND (NOT detected OF
		  autorun.inf_vuln)) AND relevant_evt OF autorun.inf_vuln) AND
		  (NOT flagI OF autorun.inf_vuln)) AND (NOT S OF
		  autorun.inf_vuln)) AND final OF windows_vuln_exploitation
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF autorun.inf_vuln <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF autorun.inf_vuln <-- TRUE;
	  ongoing_detection
		IF ((required OF autorun.inf_vuln AND (NOT detected OF
		  autorun.inf_vuln)) AND relevant_evt OF autorun.inf_vuln) AND
		  (NOT S OF autorun.inf_vuln)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF autorun.inf_vuln <-- TRUE;
	  final_detection
		IF (((required OF autorun.inf_vuln AND (NOT detected OF
		  autorun.inf_vuln)) AND relevant_evt OF autorun.inf_vuln) AND
		  S OF autorun.inf_vuln) AND (NOT flagF OF autorun.inf_vuln)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF autorun.inf_vuln <-- TRUE,
			final OF autorun.inf_vuln <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF autorun.inf_vuln <-- TRUE,
			final OF autorun.inf_vuln <-- TRUE;
	  a_posteriori_detection
		IF ((required OF autorun.inf_vuln AND (NOT detected OF
		  autorun.inf_vuln)) AND relevant_evt OF autorun.inf_vuln) AND
		  S OF autorun.inf_vuln
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF autorun.inf_vuln <-- TRUE;

OBJECT cacher_presence_fichiers_malvaillants IS_A aa_leaf;
	INTERFACE
	  fathers
		= lancer_rootkit;
	  triggered_by
		= injection_code_dans_processus;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF cacher_presence_fichiers_malvaillants <-- S
		  OF cacher_presence_fichiers_malvaillants;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF lancer_rootkit) OR (NOT S OF
		  injection_code_dans_processus)
		THEN required OF cacher_presence_fichiers_malvaillants <--
		  FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF lancer_rootkit AND (NOT S OF lancer_rootkit)
		THEN relevant_evt OF cacher_presence_fichiers_malvaillants <--
		  TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF lancer_rootkit
		THEN detected OF cacher_presence_fichiers_malvaillants <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF cacher_presence_fichiers_malvaillants
		THEN final OF cacher_presence_fichiers_malvaillants <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF cacher_presence_fichiers_malvaillants = TRUE
		THEN S OF cacher_presence_fichiers_malvaillants <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF cacher_presence_fichiers_malvaillants = TRUE)
		  AND required OF cacher_presence_fichiers_malvaillants
		THEN S OF cacher_presence_fichiers_malvaillants <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF cacher_presence_fichiers_malvaillants = FALSE)
		   AND (((required OF cacher_presence_fichiers_malvaillants
		  AND (NOT detected OF cacher_presence_fichiers_malvaillants))
		  AND (NOT S OF cacher_presence_fichiers_malvaillants)) AND
		  relevant_evt OF cacher_presence_fichiers_malvaillants)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF cacher_presence_fichiers_malvaillants
			<-- TRUE;
	  success_detected
		IF (aa_success OF cacher_presence_fichiers_malvaillants = FALSE)
		   AND (((required OF cacher_presence_fichiers_malvaillants
		  AND detected OF cacher_presence_fichiers_malvaillants) AND (
		  NOT S OF cacher_presence_fichiers_malvaillants)) AND
		  relevant_evt OF cacher_presence_fichiers_malvaillants)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF cacher_presence_fichiers_malvaillants
			<-- TRUE;
	  initial_detection
		IF (((((required OF cacher_presence_fichiers_malvaillants AND (
		  NOT detected OF cacher_presence_fichiers_malvaillants)) AND
		  relevant_evt OF cacher_presence_fichiers_malvaillants) AND (
		  NOT flagI OF cacher_presence_fichiers_malvaillants)) AND (
		  NOT S OF cacher_presence_fichiers_malvaillants)) AND final
		  OF injection_code_dans_processus) AND final OF
		  lancer_rootkit
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF cacher_presence_fichiers_malvaillants <--
			TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF cacher_presence_fichiers_malvaillants
			<-- TRUE;
	  ongoing_detection
		IF ((required OF cacher_presence_fichiers_malvaillants AND (NOT
		  detected OF cacher_presence_fichiers_malvaillants)) AND
		  relevant_evt OF cacher_presence_fichiers_malvaillants) AND (
		  NOT S OF cacher_presence_fichiers_malvaillants)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF cacher_presence_fichiers_malvaillants
			<-- TRUE;
	  final_detection
		IF (((required OF cacher_presence_fichiers_malvaillants AND (
		  NOT detected OF cacher_presence_fichiers_malvaillants)) AND
		  relevant_evt OF cacher_presence_fichiers_malvaillants) AND S
		  OF cacher_presence_fichiers_malvaillants) AND (NOT flagF OF
		  cacher_presence_fichiers_malvaillants)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF cacher_presence_fichiers_malvaillants <--
			TRUE,
			final OF cacher_presence_fichiers_malvaillants <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF cacher_presence_fichiers_malvaillants
			<-- TRUE,
			final OF cacher_presence_fichiers_malvaillants <-- TRUE;
	  a_posteriori_detection
		IF ((required OF cacher_presence_fichiers_malvaillants AND (NOT
		  detected OF cacher_presence_fichiers_malvaillants)) AND
		  relevant_evt OF cacher_presence_fichiers_malvaillants) AND S
		  OF cacher_presence_fichiers_malvaillants
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF cacher_presence_fichiers_malvaillants
			<-- TRUE;

OBJECT cascade_centrifugeuses IS_A multiple_f_leaf;
	INTERFACE
	  fathers
		= destruction_ralentissement;
	  triggered_by
		= variation_vitesse_rotation;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'disabled';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  waiting_for_rep
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  rep_priority
		DOMAIN INTEGER
		= 1;
	  mu
		DOMAIN REAL
		= 0.1;
	  lambda
		DOMAIN REAL
		= 0.0001;
	  number_of_items
		DOMAIN INTEGER
		= 10;
	  min_acceptable
		DOMAIN INTEGER
		= 8;
	  nb_of_repairmen
		DOMAIN INTEGER
		= 10;
	(*FAILURE*)
	ATTRIBUTE
	  group_loss
		LABEL "Insufficient number of cpts OK in %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	ATTRIBUTE
	  nb_OK
		DOMAIN INTEGER
		= 10;
	  nb_being_repaired
		DOMAIN INTEGER
		= 0;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF cascade_centrifugeuses <-- S OF
		  cascade_centrifugeuses;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF destruction_ralentissement) OR (NOT S OF
		  variation_vitesse_rotation)
		THEN required OF cascade_centrifugeuses <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF destruction_ralentissement AND (NOT S OF
		  destruction_ralentissement)
		THEN relevant_evt OF cascade_centrifugeuses <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF cascade_centrifugeuses
		THEN final OF cascade_centrifugeuses <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF group_loss OF cascade_centrifugeuses = TRUE
		THEN S OF cascade_centrifugeuses <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (group_loss OF cascade_centrifugeuses = TRUE) AND required
		  OF cascade_centrifugeuses
		THEN S OF cascade_centrifugeuses <-- TRUE;
	  get_rep
		GROUP simu_group
		STEP propagate_leaves
		IF (group_loss OF cascade_centrifugeuses = TRUE) AND
		  waiting_for_rep OF cascade_centrifugeuses
		THEN waiting_for_rep OF cascade_centrifugeuses <-- FALSE;
	  repair_part
		GROUP simu_group
		STEP initialization
		IF nb_OK OF cascade_centrifugeuses < 0
		THEN nb_being_repaired OF cascade_centrifugeuses <-- 10;
	  repair_all
		GROUP simu_group
		STEP initialization
		IF nb_OK OF cascade_centrifugeuses >= 0
		THEN nb_being_repaired OF cascade_centrifugeuses <-- (10 -
		  nb_OK OF cascade_centrifugeuses);
	  groupfail
		GROUP simu_group
		STEP initialization
		IF nb_OK OF cascade_centrifugeuses < 8
		THEN S OF cascade_centrifugeuses <-- TRUE,
		  final OF cascade_centrifugeuses <-- TRUE;
	  repair_part2
		GROUP simu_group
		STEP initialization
		IF (nb_OK OF cascade_centrifugeuses > 8) AND final OF
		  cascade_centrifugeuses
		THEN final OF cascade_centrifugeuses <-- FALSE;
	OCCURRENCE
	  failuregaaF
		GROUP simu_group
		IF ((nb_OK OF cascade_centrifugeuses > 0) AND required OF
		  cascade_centrifugeuses) AND relevant_evt OF
		  cascade_centrifugeuses
		MAY_OCCUR
		  FAULT failF
		  LABEL "failure of an object of group %OBJECT"
		  DIST EXP (0.0001 *  nb_OK OF cascade_centrifugeuses)
		  INDUCING nb_OK OF cascade_centrifugeuses <-- (nb_OK OF
			cascade_centrifugeuses - 1);
	  repairgaaF
		GROUP simu_group
		IF (nb_OK OF cascade_centrifugeuses < 10) AND (
		  nb_being_repaired OF cascade_centrifugeuses > 0)
		MAY_OCCUR
		  REPAIR rep
		  DIST EXP (0.1 *  nb_being_repaired OF cascade_centrifugeuses)
		  INDUCING nb_OK OF cascade_centrifugeuses <-- (nb_OK OF
			cascade_centrifugeuses + 1);

OBJECT check_Profibus_CFG IS_A aa_leaf;
	INTERFACE
	  fathers
		= check_config;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF check_Profibus_CFG <-- S OF
		  check_Profibus_CFG;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF check_config
		THEN required OF check_Profibus_CFG <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF check_config AND (NOT S OF check_config)
		THEN relevant_evt OF check_Profibus_CFG <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF check_config
		THEN detected OF check_Profibus_CFG <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF check_Profibus_CFG
		THEN final OF check_Profibus_CFG <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF check_Profibus_CFG = TRUE
		THEN S OF check_Profibus_CFG <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF check_Profibus_CFG = TRUE) AND required OF
		  check_Profibus_CFG
		THEN S OF check_Profibus_CFG <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF check_Profibus_CFG = FALSE) AND (((required
		  OF check_Profibus_CFG AND (NOT detected OF
		  check_Profibus_CFG)) AND (NOT S OF check_Profibus_CFG)) AND
		  relevant_evt OF check_Profibus_CFG)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF check_Profibus_CFG <-- TRUE;
	  success_detected
		IF (aa_success OF check_Profibus_CFG = FALSE) AND (((required
		  OF check_Profibus_CFG AND detected OF check_Profibus_CFG)
		  AND (NOT S OF check_Profibus_CFG)) AND relevant_evt OF
		  check_Profibus_CFG)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF check_Profibus_CFG <-- TRUE;
	  initial_detection
		IF ((((required OF check_Profibus_CFG AND (NOT detected OF
		  check_Profibus_CFG)) AND relevant_evt OF check_Profibus_CFG)
		  AND (NOT flagI OF check_Profibus_CFG)) AND (NOT S OF
		  check_Profibus_CFG)) AND final OF check_config
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF check_Profibus_CFG <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF check_Profibus_CFG <-- TRUE;
	  ongoing_detection
		IF ((required OF check_Profibus_CFG AND (NOT detected OF
		  check_Profibus_CFG)) AND relevant_evt OF check_Profibus_CFG)
		  AND (NOT S OF check_Profibus_CFG)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF check_Profibus_CFG <-- TRUE;
	  final_detection
		IF (((required OF check_Profibus_CFG AND (NOT detected OF
		  check_Profibus_CFG)) AND relevant_evt OF check_Profibus_CFG)
		  AND S OF check_Profibus_CFG) AND (NOT flagF OF
		  check_Profibus_CFG)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF check_Profibus_CFG <-- TRUE,
			final OF check_Profibus_CFG <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF check_Profibus_CFG <-- TRUE,
			final OF check_Profibus_CFG <-- TRUE;
	  a_posteriori_detection
		IF ((required OF check_Profibus_CFG AND (NOT detected OF
		  check_Profibus_CFG)) AND relevant_evt OF check_Profibus_CFG)
		  AND S OF check_Profibus_CFG
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF check_Profibus_CFG <-- TRUE;

OBJECT check_STEP7_or_WinCC IS_A aa_leaf;
	INTERFACE
	  fathers
		= PLC_compromised;
	  triggers
		= Load_Lib;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF check_STEP7_or_WinCC <-- S OF
		  check_STEP7_or_WinCC;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF PLC_compromised
		THEN required OF check_STEP7_or_WinCC <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF PLC_compromised AND (NOT S OF
		  PLC_compromised)) OR (relevant_evt OF Load_Lib AND (NOT S OF
		  Load_Lib))
		THEN relevant_evt OF check_STEP7_or_WinCC <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF PLC_compromised
		THEN detected OF check_STEP7_or_WinCC <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF check_STEP7_or_WinCC
		THEN final OF check_STEP7_or_WinCC <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF check_STEP7_or_WinCC = TRUE
		THEN S OF check_STEP7_or_WinCC <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF check_STEP7_or_WinCC = TRUE) AND required OF
		  check_STEP7_or_WinCC
		THEN S OF check_STEP7_or_WinCC <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF check_STEP7_or_WinCC = FALSE) AND (((required
		  OF check_STEP7_or_WinCC AND (NOT detected OF
		  check_STEP7_or_WinCC)) AND (NOT S OF check_STEP7_or_WinCC))
		  AND relevant_evt OF check_STEP7_or_WinCC)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF check_STEP7_or_WinCC <-- TRUE;
	  success_detected
		IF (aa_success OF check_STEP7_or_WinCC = FALSE) AND (((required
		  OF check_STEP7_or_WinCC AND detected OF check_STEP7_or_WinCC)
		   AND (NOT S OF check_STEP7_or_WinCC)) AND relevant_evt OF
		  check_STEP7_or_WinCC)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF check_STEP7_or_WinCC <-- TRUE;
	  initial_detection
		IF ((((required OF check_STEP7_or_WinCC AND (NOT detected OF
		  check_STEP7_or_WinCC)) AND relevant_evt OF
		  check_STEP7_or_WinCC) AND (NOT flagI OF check_STEP7_or_WinCC)
		  ) AND (NOT S OF check_STEP7_or_WinCC)) AND final OF
		  PLC_compromised
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF check_STEP7_or_WinCC <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF check_STEP7_or_WinCC <-- TRUE;
	  ongoing_detection
		IF ((required OF check_STEP7_or_WinCC AND (NOT detected OF
		  check_STEP7_or_WinCC)) AND relevant_evt OF
		  check_STEP7_or_WinCC) AND (NOT S OF check_STEP7_or_WinCC)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF check_STEP7_or_WinCC <-- TRUE;
	  final_detection
		IF (((required OF check_STEP7_or_WinCC AND (NOT detected OF
		  check_STEP7_or_WinCC)) AND relevant_evt OF
		  check_STEP7_or_WinCC) AND S OF check_STEP7_or_WinCC) AND (
		  NOT flagF OF check_STEP7_or_WinCC)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF check_STEP7_or_WinCC <-- TRUE,
			final OF check_STEP7_or_WinCC <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF check_STEP7_or_WinCC <-- TRUE,
			final OF check_STEP7_or_WinCC <-- TRUE;
	  a_posteriori_detection
		IF ((required OF check_STEP7_or_WinCC AND (NOT detected OF
		  check_STEP7_or_WinCC)) AND relevant_evt OF
		  check_STEP7_or_WinCC) AND S OF check_STEP7_or_WinCC
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF check_STEP7_or_WinCC <-- TRUE;

OBJECT check_config IS_A and_gate;
	INTERFACE
	  sons
		= Check_PLC_CFG check_Profibus_CFG check_nbr_variateurs;
	  fathers
		= SCADA_system_compromised;
	  triggered_by
		= rename_replace_Lib;
	  triggers
		= modify_PLC_function_bloks;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF check_config <-- S OF check_config;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF SCADA_system_compromised) OR (NOT S OF
		  rename_replace_Lib)
		THEN required OF check_config <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF SCADA_system_compromised AND (NOT S OF
		  SCADA_system_compromised)) OR (relevant_evt OF
		  modify_PLC_function_bloks AND (NOT S OF
		  modify_PLC_function_bloks))
		THEN relevant_evt OF check_config <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF ((detected OF Check_PLC_CFG OR detected OF
		  check_Profibus_CFG) OR detected OF check_nbr_variateurs) OR
		  detected OF SCADA_system_compromised
		THEN detected OF check_config <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF check_config
		THEN final OF check_config <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF rename_replace_Lib AND final OF
		  SCADA_system_compromised
		THEN final OF check_config <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF ((S OF Check_PLC_CFG AND final OF Check_PLC_CFG) AND (S OF
		  check_Profibus_CFG AND final OF check_Profibus_CFG)) AND (S
		  OF check_nbr_variateurs AND final OF check_nbr_variateurs)
		THEN S OF check_config <-- TRUE,
		  final OF check_config <-- TRUE;

OBJECT check_nbr_variateurs IS_A aa_leaf;
	INTERFACE
	  fathers
		= check_config;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF check_nbr_variateurs <-- S OF
		  check_nbr_variateurs;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF check_config
		THEN required OF check_nbr_variateurs <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF check_config AND (NOT S OF check_config)
		THEN relevant_evt OF check_nbr_variateurs <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF check_config
		THEN detected OF check_nbr_variateurs <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF check_nbr_variateurs
		THEN final OF check_nbr_variateurs <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF check_nbr_variateurs = TRUE
		THEN S OF check_nbr_variateurs <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF check_nbr_variateurs = TRUE) AND required OF
		  check_nbr_variateurs
		THEN S OF check_nbr_variateurs <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF check_nbr_variateurs = FALSE) AND (((required
		  OF check_nbr_variateurs AND (NOT detected OF
		  check_nbr_variateurs)) AND (NOT S OF check_nbr_variateurs))
		  AND relevant_evt OF check_nbr_variateurs)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF check_nbr_variateurs <-- TRUE;
	  success_detected
		IF (aa_success OF check_nbr_variateurs = FALSE) AND (((required
		  OF check_nbr_variateurs AND detected OF check_nbr_variateurs)
		   AND (NOT S OF check_nbr_variateurs)) AND relevant_evt OF
		  check_nbr_variateurs)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF check_nbr_variateurs <-- TRUE;
	  initial_detection
		IF ((((required OF check_nbr_variateurs AND (NOT detected OF
		  check_nbr_variateurs)) AND relevant_evt OF
		  check_nbr_variateurs) AND (NOT flagI OF check_nbr_variateurs)
		  ) AND (NOT S OF check_nbr_variateurs)) AND final OF
		  check_config
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF check_nbr_variateurs <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF check_nbr_variateurs <-- TRUE;
	  ongoing_detection
		IF ((required OF check_nbr_variateurs AND (NOT detected OF
		  check_nbr_variateurs)) AND relevant_evt OF
		  check_nbr_variateurs) AND (NOT S OF check_nbr_variateurs)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF check_nbr_variateurs <-- TRUE;
	  final_detection
		IF (((required OF check_nbr_variateurs AND (NOT detected OF
		  check_nbr_variateurs)) AND relevant_evt OF
		  check_nbr_variateurs) AND S OF check_nbr_variateurs) AND (
		  NOT flagF OF check_nbr_variateurs)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF check_nbr_variateurs <-- TRUE,
			final OF check_nbr_variateurs <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF check_nbr_variateurs <-- TRUE,
			final OF check_nbr_variateurs <-- TRUE;
	  a_posteriori_detection
		IF ((required OF check_nbr_variateurs AND (NOT detected OF
		  check_nbr_variateurs)) AND relevant_evt OF
		  check_nbr_variateurs) AND S OF check_nbr_variateurs
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF check_nbr_variateurs <-- TRUE;

OBJECT collecte_de_donnees IS_A aa_leaf;
	INTERFACE
	  fathers
		= sys_300;
	  triggers
		= PLC_envoie_donnees_falcifiees_aux_variateurs;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF collecte_de_donnees <-- S OF
		  collecte_de_donnees;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF sys_300
		THEN required OF collecte_de_donnees <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF sys_300 AND (NOT S OF sys_300)) OR (
		  relevant_evt OF PLC_envoie_donnees_falcifiees_aux_variateurs
		  AND (NOT S OF PLC_envoie_donnees_falcifiees_aux_variateurs))
		THEN relevant_evt OF collecte_de_donnees <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF sys_300
		THEN detected OF collecte_de_donnees <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF collecte_de_donnees
		THEN final OF collecte_de_donnees <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF collecte_de_donnees = TRUE
		THEN S OF collecte_de_donnees <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF collecte_de_donnees = TRUE) AND required OF
		  collecte_de_donnees
		THEN S OF collecte_de_donnees <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF collecte_de_donnees = FALSE) AND (((required
		  OF collecte_de_donnees AND (NOT detected OF
		  collecte_de_donnees)) AND (NOT S OF collecte_de_donnees))
		  AND relevant_evt OF collecte_de_donnees)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF collecte_de_donnees <-- TRUE;
	  success_detected
		IF (aa_success OF collecte_de_donnees = FALSE) AND (((required
		  OF collecte_de_donnees AND detected OF collecte_de_donnees)
		  AND (NOT S OF collecte_de_donnees)) AND relevant_evt OF
		  collecte_de_donnees)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF collecte_de_donnees <-- TRUE;
	  initial_detection
		IF ((((required OF collecte_de_donnees AND (NOT detected OF
		  collecte_de_donnees)) AND relevant_evt OF
		  collecte_de_donnees) AND (NOT flagI OF collecte_de_donnees))
		  AND (NOT S OF collecte_de_donnees)) AND final OF sys_300
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF collecte_de_donnees <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF collecte_de_donnees <-- TRUE;
	  ongoing_detection
		IF ((required OF collecte_de_donnees AND (NOT detected OF
		  collecte_de_donnees)) AND relevant_evt OF
		  collecte_de_donnees) AND (NOT S OF collecte_de_donnees)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF collecte_de_donnees <-- TRUE;
	  final_detection
		IF (((required OF collecte_de_donnees AND (NOT detected OF
		  collecte_de_donnees)) AND relevant_evt OF
		  collecte_de_donnees) AND S OF collecte_de_donnees) AND (NOT
		  flagF OF collecte_de_donnees)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF collecte_de_donnees <-- TRUE,
			final OF collecte_de_donnees <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF collecte_de_donnees <-- TRUE,
			final OF collecte_de_donnees <-- TRUE;
	  a_posteriori_detection
		IF ((required OF collecte_de_donnees AND (NOT detected OF
		  collecte_de_donnees)) AND relevant_evt OF
		  collecte_de_donnees) AND S OF collecte_de_donnees
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF collecte_de_donnees <-- TRUE;

OBJECT communication_P2P IS_A aa_leaf;
	INTERFACE
	  fathers
		= Proliferation_et_MAJ;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF communication_P2P <-- S OF communication_P2P;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF Proliferation_et_MAJ
		THEN required OF communication_P2P <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF Proliferation_et_MAJ AND (NOT S OF
		  Proliferation_et_MAJ)
		THEN relevant_evt OF communication_P2P <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF Proliferation_et_MAJ
		THEN detected OF communication_P2P <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF communication_P2P
		THEN final OF communication_P2P <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF communication_P2P = TRUE
		THEN S OF communication_P2P <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF communication_P2P = TRUE) AND required OF
		  communication_P2P
		THEN S OF communication_P2P <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF communication_P2P = FALSE) AND (((required OF
		  communication_P2P AND (NOT detected OF communication_P2P))
		  AND (NOT S OF communication_P2P)) AND relevant_evt OF
		  communication_P2P)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF communication_P2P <-- TRUE;
	  success_detected
		IF (aa_success OF communication_P2P = FALSE) AND (((required OF
		  communication_P2P AND detected OF communication_P2P) AND (
		  NOT S OF communication_P2P)) AND relevant_evt OF
		  communication_P2P)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF communication_P2P <-- TRUE;
	  initial_detection
		IF ((((required OF communication_P2P AND (NOT detected OF
		  communication_P2P)) AND relevant_evt OF communication_P2P)
		  AND (NOT flagI OF communication_P2P)) AND (NOT S OF
		  communication_P2P)) AND final OF Proliferation_et_MAJ
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF communication_P2P <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF communication_P2P <-- TRUE;
	  ongoing_detection
		IF ((required OF communication_P2P AND (NOT detected OF
		  communication_P2P)) AND relevant_evt OF communication_P2P)
		  AND (NOT S OF communication_P2P)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF communication_P2P <-- TRUE;
	  final_detection
		IF (((required OF communication_P2P AND (NOT detected OF
		  communication_P2P)) AND relevant_evt OF communication_P2P)
		  AND S OF communication_P2P) AND (NOT flagF OF
		  communication_P2P)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF communication_P2P <-- TRUE,
			final OF communication_P2P <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF communication_P2P <-- TRUE,
			final OF communication_P2P <-- TRUE;
	  a_posteriori_detection
		IF ((required OF communication_P2P AND (NOT detected OF
		  communication_P2P)) AND relevant_evt OF communication_P2P)
		  AND S OF communication_P2P
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF communication_P2P <-- TRUE;

OBJECT communication_avec_serveur_CC IS_A aa_leaf;
	INTERFACE
	  fathers
		= Proliferation_et_MAJ;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF communication_avec_serveur_CC <-- S OF
		  communication_avec_serveur_CC;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF Proliferation_et_MAJ
		THEN required OF communication_avec_serveur_CC <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF Proliferation_et_MAJ AND (NOT S OF
		  Proliferation_et_MAJ)
		THEN relevant_evt OF communication_avec_serveur_CC <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF Proliferation_et_MAJ
		THEN detected OF communication_avec_serveur_CC <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF communication_avec_serveur_CC
		THEN final OF communication_avec_serveur_CC <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF communication_avec_serveur_CC = TRUE
		THEN S OF communication_avec_serveur_CC <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF communication_avec_serveur_CC = TRUE) AND
		  required OF communication_avec_serveur_CC
		THEN S OF communication_avec_serveur_CC <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF communication_avec_serveur_CC = FALSE) AND (((
		  required OF communication_avec_serveur_CC AND (NOT detected
		  OF communication_avec_serveur_CC)) AND (NOT S OF
		  communication_avec_serveur_CC)) AND relevant_evt OF
		  communication_avec_serveur_CC)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF communication_avec_serveur_CC <-- TRUE;
	  success_detected
		IF (aa_success OF communication_avec_serveur_CC = FALSE) AND (((
		  required OF communication_avec_serveur_CC AND detected OF
		  communication_avec_serveur_CC) AND (NOT S OF
		  communication_avec_serveur_CC)) AND relevant_evt OF
		  communication_avec_serveur_CC)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF communication_avec_serveur_CC <-- TRUE;
	  initial_detection
		IF ((((required OF communication_avec_serveur_CC AND (NOT
		  detected OF communication_avec_serveur_CC)) AND relevant_evt
		  OF communication_avec_serveur_CC) AND (NOT flagI OF
		  communication_avec_serveur_CC)) AND (NOT S OF
		  communication_avec_serveur_CC)) AND final OF
		  Proliferation_et_MAJ
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF communication_avec_serveur_CC <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF communication_avec_serveur_CC <-- TRUE;
	  ongoing_detection
		IF ((required OF communication_avec_serveur_CC AND (NOT
		  detected OF communication_avec_serveur_CC)) AND relevant_evt
		  OF communication_avec_serveur_CC) AND (NOT S OF
		  communication_avec_serveur_CC)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF communication_avec_serveur_CC <-- TRUE;
	  final_detection
		IF (((required OF communication_avec_serveur_CC AND (NOT
		  detected OF communication_avec_serveur_CC)) AND relevant_evt
		  OF communication_avec_serveur_CC) AND S OF
		  communication_avec_serveur_CC) AND (NOT flagF OF
		  communication_avec_serveur_CC)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF communication_avec_serveur_CC <-- TRUE,
			final OF communication_avec_serveur_CC <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF communication_avec_serveur_CC <-- TRUE,
			final OF communication_avec_serveur_CC <-- TRUE;
	  a_posteriori_detection
		IF ((required OF communication_avec_serveur_CC AND (NOT
		  detected OF communication_avec_serveur_CC)) AND relevant_evt
		  OF communication_avec_serveur_CC) AND S OF
		  communication_avec_serveur_CC
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF communication_avec_serveur_CC <-- TRUE;

OBJECT connection_BD_via_pwd IS_A aa_leaf;
	INTERFACE
	  fathers
		= infection_BD;
	  triggered_by
		= recheche_WinCC;
	  triggers
		= evoie_code_malveillant_via_SQL_req;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF connection_BD_via_pwd <-- S OF
		  connection_BD_via_pwd;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF infection_BD) OR (NOT S OF recheche_WinCC)
		THEN required OF connection_BD_via_pwd <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF infection_BD AND (NOT S OF infection_BD))
		  OR (relevant_evt OF evoie_code_malveillant_via_SQL_req AND (
		  NOT S OF evoie_code_malveillant_via_SQL_req))
		THEN relevant_evt OF connection_BD_via_pwd <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF infection_BD
		THEN detected OF connection_BD_via_pwd <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF connection_BD_via_pwd
		THEN final OF connection_BD_via_pwd <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF connection_BD_via_pwd = TRUE
		THEN S OF connection_BD_via_pwd <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF connection_BD_via_pwd = TRUE) AND required OF
		  connection_BD_via_pwd
		THEN S OF connection_BD_via_pwd <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF connection_BD_via_pwd = FALSE) AND (((
		  required OF connection_BD_via_pwd AND (NOT detected OF
		  connection_BD_via_pwd)) AND (NOT S OF connection_BD_via_pwd))
		   AND relevant_evt OF connection_BD_via_pwd)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF connection_BD_via_pwd <-- TRUE;
	  success_detected
		IF (aa_success OF connection_BD_via_pwd = FALSE) AND (((
		  required OF connection_BD_via_pwd AND detected OF
		  connection_BD_via_pwd) AND (NOT S OF connection_BD_via_pwd))
		  AND relevant_evt OF connection_BD_via_pwd)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF connection_BD_via_pwd <-- TRUE;
	  initial_detection
		IF (((((required OF connection_BD_via_pwd AND (NOT detected OF
		  connection_BD_via_pwd)) AND relevant_evt OF
		  connection_BD_via_pwd) AND (NOT flagI OF
		  connection_BD_via_pwd)) AND (NOT S OF connection_BD_via_pwd))
		   AND final OF recheche_WinCC) AND final OF infection_BD
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF connection_BD_via_pwd <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF connection_BD_via_pwd <-- TRUE;
	  ongoing_detection
		IF ((required OF connection_BD_via_pwd AND (NOT detected OF
		  connection_BD_via_pwd)) AND relevant_evt OF
		  connection_BD_via_pwd) AND (NOT S OF connection_BD_via_pwd)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF connection_BD_via_pwd <-- TRUE;
	  final_detection
		IF (((required OF connection_BD_via_pwd AND (NOT detected OF
		  connection_BD_via_pwd)) AND relevant_evt OF
		  connection_BD_via_pwd) AND S OF connection_BD_via_pwd) AND (
		  NOT flagF OF connection_BD_via_pwd)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF connection_BD_via_pwd <-- TRUE,
			final OF connection_BD_via_pwd <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF connection_BD_via_pwd <-- TRUE,
			final OF connection_BD_via_pwd <-- TRUE;
	  a_posteriori_detection
		IF ((required OF connection_BD_via_pwd AND (NOT detected OF
		  connection_BD_via_pwd)) AND relevant_evt OF
		  connection_BD_via_pwd) AND S OF connection_BD_via_pwd
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF connection_BD_via_pwd <-- TRUE;

OBJECT connection_PC_infecte_au_PLC IS_A tse_leaf;
	INTERFACE
	  fathers
		= SCADA_system_compromised;
	  triggers
		= PLC_compromised;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  lambda_S_ND_idle
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D_idle
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I_idle
		DOMAIN REAL
		= 0;
	  lambda_D_O_idle
		DOMAIN REAL
		= 0;
	  gamma_D_F_idle
		DOMAIN REAL
		= 0;
	  lambda_D_A_idle
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	  flagIi
		DOMAIN BOOLEAN
		= FALSE;
	  flagFi
		DOMAIN BOOLEAN
		= FALSE;
	  active
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  tse_real
		LABEL "realization of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF connection_PC_infecte_au_PLC <-- S OF
		  connection_PC_infecte_au_PLC;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF SCADA_system_compromised
		THEN required OF connection_PC_infecte_au_PLC <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF SCADA_system_compromised AND (NOT S OF
		  SCADA_system_compromised)) OR (relevant_evt OF
		  PLC_compromised AND (NOT S OF PLC_compromised))
		THEN relevant_evt OF connection_PC_infecte_au_PLC <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF SCADA_system_compromised
		THEN detected OF connection_PC_infecte_au_PLC <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF connection_PC_infecte_au_PLC
		THEN final OF connection_PC_infecte_au_PLC <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF tse_real OF connection_PC_infecte_au_PLC = TRUE
		THEN S OF connection_PC_infecte_au_PLC <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (tse_real OF connection_PC_infecte_au_PLC = TRUE) AND
		  required OF connection_PC_infecte_au_PLC
		THEN S OF connection_PC_infecte_au_PLC <-- TRUE;
	  activation
		GROUP simu_group
		STEP tops
		IF required OF connection_PC_infecte_au_PLC
		THEN active OF connection_PC_infecte_au_PLC <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (tse_real OF connection_PC_infecte_au_PLC = FALSE) AND ((((
		  required OF connection_PC_infecte_au_PLC AND (NOT detected
		  OF connection_PC_infecte_au_PLC)) AND (NOT S OF
		  connection_PC_infecte_au_PLC)) AND active OF
		  connection_PC_infecte_au_PLC) AND relevant_evt OF
		  connection_PC_infecte_au_PLC)
		MAY_OCCUR
		  FAULT tse_real
		  LABEL "realization undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING tse_real OF connection_PC_infecte_au_PLC <-- TRUE;
	  success_detected
		IF (tse_real OF connection_PC_infecte_au_PLC = FALSE) AND ((((
		  required OF connection_PC_infecte_au_PLC AND detected OF
		  connection_PC_infecte_au_PLC) AND (NOT S OF
		  connection_PC_infecte_au_PLC)) AND active OF
		  connection_PC_infecte_au_PLC) AND relevant_evt OF
		  connection_PC_infecte_au_PLC)
		MAY_OCCUR
		  FAULT tse_real
		  LABEL "realization detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING tse_real OF connection_PC_infecte_au_PLC <-- TRUE;
	  initial_detection
		IF (((((required OF connection_PC_infecte_au_PLC AND (NOT
		  detected OF connection_PC_infecte_au_PLC)) AND relevant_evt
		  OF connection_PC_infecte_au_PLC) AND (NOT S OF
		  connection_PC_infecte_au_PLC)) AND (NOT flagI OF
		  connection_PC_infecte_au_PLC)) AND active OF
		  connection_PC_infecte_au_PLC) AND final OF
		  SCADA_system_compromised
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF connection_PC_infecte_au_PLC <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF connection_PC_infecte_au_PLC <-- TRUE;
	  ongoing_detection
		IF (((required OF connection_PC_infecte_au_PLC AND (NOT
		  detected OF connection_PC_infecte_au_PLC)) AND relevant_evt
		  OF connection_PC_infecte_au_PLC) AND (NOT S OF
		  connection_PC_infecte_au_PLC)) AND active OF
		  connection_PC_infecte_au_PLC
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF connection_PC_infecte_au_PLC <-- TRUE;
	  final_detection
		IF ((((required OF connection_PC_infecte_au_PLC AND (NOT
		  detected OF connection_PC_infecte_au_PLC)) AND relevant_evt
		  OF connection_PC_infecte_au_PLC) AND S OF
		  connection_PC_infecte_au_PLC) AND (NOT flagF OF
		  connection_PC_infecte_au_PLC)) AND active OF
		  connection_PC_infecte_au_PLC
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF connection_PC_infecte_au_PLC <-- TRUE,
			final OF connection_PC_infecte_au_PLC <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF connection_PC_infecte_au_PLC <-- TRUE,
			final OF connection_PC_infecte_au_PLC <-- TRUE;
	  a_posteriori_detection
		IF (((required OF connection_PC_infecte_au_PLC AND (NOT
		  detected OF connection_PC_infecte_au_PLC)) AND relevant_evt
		  OF connection_PC_infecte_au_PLC) AND S OF
		  connection_PC_infecte_au_PLC) AND active OF
		  connection_PC_infecte_au_PLC
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF connection_PC_infecte_au_PLC <-- TRUE;
	  success_undetected_idle
		IF (tse_real OF connection_PC_infecte_au_PLC = FALSE) AND (((((
		  NOT required OF connection_PC_infecte_au_PLC) AND (NOT
		  detected OF connection_PC_infecte_au_PLC)) AND relevant_evt
		  OF connection_PC_infecte_au_PLC) AND (NOT S OF
		  connection_PC_infecte_au_PLC)) AND active OF
		  connection_PC_infecte_au_PLC)
		MAY_OCCUR
		  FAULT tse_real
		  LABEL "idle realization undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING tse_real OF connection_PC_infecte_au_PLC <-- TRUE;
	  success_detected_idle
		IF (tse_real OF connection_PC_infecte_au_PLC = FALSE) AND (((((
		  NOT required OF connection_PC_infecte_au_PLC) AND detected
		  OF connection_PC_infecte_au_PLC) AND relevant_evt OF
		  connection_PC_infecte_au_PLC) AND (NOT S OF
		  connection_PC_infecte_au_PLC)) AND active OF
		  connection_PC_infecte_au_PLC)
		MAY_OCCUR
		  FAULT tse_real
		  LABEL "idle realization detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING tse_real OF connection_PC_infecte_au_PLC <-- TRUE;
	  initial_detection_idle
		IF ((((((NOT required OF connection_PC_infecte_au_PLC) AND (NOT
		  detected OF connection_PC_infecte_au_PLC)) AND relevant_evt
		  OF connection_PC_infecte_au_PLC) AND (NOT S OF
		  connection_PC_infecte_au_PLC)) AND (NOT flagIi OF
		  connection_PC_infecte_au_PLC)) AND active OF
		  connection_PC_infecte_au_PLC) AND final OF
		  SCADA_system_compromised
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagIi OF connection_PC_infecte_au_PLC <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "idle initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF connection_PC_infecte_au_PLC <-- TRUE;
	  ongoing_detection_idle
		IF ((((NOT required OF connection_PC_infecte_au_PLC) AND (NOT
		  detected OF connection_PC_infecte_au_PLC)) AND relevant_evt
		  OF connection_PC_infecte_au_PLC) AND (NOT S OF
		  connection_PC_infecte_au_PLC)) AND active OF
		  connection_PC_infecte_au_PLC
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "idle ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF connection_PC_infecte_au_PLC <-- TRUE;
	  final_detection_idle
		IF (((((NOT required OF connection_PC_infecte_au_PLC) AND (NOT
		  detected OF connection_PC_infecte_au_PLC)) AND relevant_evt
		  OF connection_PC_infecte_au_PLC) AND S OF
		  connection_PC_infecte_au_PLC) AND (NOT flagFi OF
		  connection_PC_infecte_au_PLC)) AND active OF
		  connection_PC_infecte_au_PLC
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagFi OF connection_PC_infecte_au_PLC <-- TRUE,
			final OF connection_PC_infecte_au_PLC <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "idle final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF connection_PC_infecte_au_PLC <-- TRUE,
			final OF connection_PC_infecte_au_PLC <-- TRUE;
	  a_posteriori_detection_idle
		IF ((((NOT required OF connection_PC_infecte_au_PLC) AND (NOT
		  detected OF connection_PC_infecte_au_PLC)) AND relevant_evt
		  OF connection_PC_infecte_au_PLC) AND S OF
		  connection_PC_infecte_au_PLC) AND active OF
		  connection_PC_infecte_au_PLC
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "idle final detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF connection_PC_infecte_au_PLC <-- TRUE;

OBJECT destruction_ralentissement IS_A and_gate;
	INTERFACE
	  sons
		= cascade_centrifugeuses variation_vitesse_rotation;
	  fathers
		= Sabotage;
	  triggered_by
		= prise_en_main_signaux_controle_par_pirate;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF destruction_ralentissement <-- S OF
		  destruction_ralentissement;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF Sabotage) OR (NOT S OF
		  prise_en_main_signaux_controle_par_pirate)
		THEN required OF destruction_ralentissement <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF Sabotage AND (NOT S OF Sabotage)
		THEN relevant_evt OF destruction_ralentissement <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF variation_vitesse_rotation OR detected OF
		  Sabotage
		THEN detected OF destruction_ralentissement <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF destruction_ralentissement
		THEN final OF destruction_ralentissement <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF prise_en_main_signaux_controle_par_pirate AND final
		  OF Sabotage
		THEN final OF destruction_ralentissement <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF (S OF cascade_centrifugeuses AND final OF
		  cascade_centrifugeuses) AND (S OF variation_vitesse_rotation
		  AND final OF variation_vitesse_rotation)
		THEN S OF destruction_ralentissement <-- TRUE,
		  final OF destruction_ralentissement <-- TRUE;

OBJECT escalation_of_preveleges IS_A and_gate;
	INTERFACE
	  sons
		= keyboard_handling task_planner;
	  fathers
		= self_installation;
	  triggers
		= execution_module_principal;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF escalation_of_preveleges <-- S OF
		  escalation_of_preveleges;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF self_installation
		THEN required OF escalation_of_preveleges <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF self_installation AND (NOT S OF
		  self_installation)) OR (relevant_evt OF
		  execution_module_principal AND (NOT S OF
		  execution_module_principal))
		THEN relevant_evt OF escalation_of_preveleges <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (detected OF keyboard_handling OR detected OF task_planner)
		  OR detected OF self_installation
		THEN detected OF escalation_of_preveleges <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF escalation_of_preveleges
		THEN final OF escalation_of_preveleges <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF self_installation
		THEN final OF escalation_of_preveleges <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF (S OF keyboard_handling AND final OF keyboard_handling) AND (
		  S OF task_planner AND final OF task_planner)
		THEN S OF escalation_of_preveleges <-- TRUE,
		  final OF escalation_of_preveleges <-- TRUE;

OBJECT evoie_code_malveillant_via_SQL_req IS_A aa_leaf;
	INTERFACE
	  fathers
		= infection_BD;
	  triggered_by
		= connection_BD_via_pwd;
	  triggers
		= exec_code_malveillant;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF evoie_code_malveillant_via_SQL_req <-- S OF
		  evoie_code_malveillant_via_SQL_req;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF infection_BD) OR (NOT S OF
		  connection_BD_via_pwd)
		THEN required OF evoie_code_malveillant_via_SQL_req <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF infection_BD AND (NOT S OF infection_BD))
		  OR (relevant_evt OF exec_code_malveillant AND (NOT S OF
		  exec_code_malveillant))
		THEN relevant_evt OF evoie_code_malveillant_via_SQL_req <--
		  TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF infection_BD
		THEN detected OF evoie_code_malveillant_via_SQL_req <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF evoie_code_malveillant_via_SQL_req
		THEN final OF evoie_code_malveillant_via_SQL_req <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF evoie_code_malveillant_via_SQL_req = TRUE
		THEN S OF evoie_code_malveillant_via_SQL_req <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF evoie_code_malveillant_via_SQL_req = TRUE)
		  AND required OF evoie_code_malveillant_via_SQL_req
		THEN S OF evoie_code_malveillant_via_SQL_req <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF evoie_code_malveillant_via_SQL_req = FALSE)
		  AND (((required OF evoie_code_malveillant_via_SQL_req AND (
		  NOT detected OF evoie_code_malveillant_via_SQL_req)) AND (
		  NOT S OF evoie_code_malveillant_via_SQL_req)) AND
		  relevant_evt OF evoie_code_malveillant_via_SQL_req)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF evoie_code_malveillant_via_SQL_req <--
			TRUE;
	  success_detected
		IF (aa_success OF evoie_code_malveillant_via_SQL_req = FALSE)
		  AND (((required OF evoie_code_malveillant_via_SQL_req AND
		  detected OF evoie_code_malveillant_via_SQL_req) AND (NOT S
		  OF evoie_code_malveillant_via_SQL_req)) AND relevant_evt OF
		  evoie_code_malveillant_via_SQL_req)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF evoie_code_malveillant_via_SQL_req <--
			TRUE;
	  initial_detection
		IF (((((required OF evoie_code_malveillant_via_SQL_req AND (NOT
		  detected OF evoie_code_malveillant_via_SQL_req)) AND
		  relevant_evt OF evoie_code_malveillant_via_SQL_req) AND (NOT
		  flagI OF evoie_code_malveillant_via_SQL_req)) AND (NOT S OF
		  evoie_code_malveillant_via_SQL_req)) AND final OF
		  connection_BD_via_pwd) AND final OF infection_BD
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF evoie_code_malveillant_via_SQL_req <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF evoie_code_malveillant_via_SQL_req <--
			TRUE;
	  ongoing_detection
		IF ((required OF evoie_code_malveillant_via_SQL_req AND (NOT
		  detected OF evoie_code_malveillant_via_SQL_req)) AND
		  relevant_evt OF evoie_code_malveillant_via_SQL_req) AND (NOT
		  S OF evoie_code_malveillant_via_SQL_req)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF evoie_code_malveillant_via_SQL_req <--
			TRUE;
	  final_detection
		IF (((required OF evoie_code_malveillant_via_SQL_req AND (NOT
		  detected OF evoie_code_malveillant_via_SQL_req)) AND
		  relevant_evt OF evoie_code_malveillant_via_SQL_req) AND S OF
		  evoie_code_malveillant_via_SQL_req) AND (NOT flagF OF
		  evoie_code_malveillant_via_SQL_req)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF evoie_code_malveillant_via_SQL_req <--
			TRUE,
			final OF evoie_code_malveillant_via_SQL_req <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF evoie_code_malveillant_via_SQL_req <--
			TRUE,
			final OF evoie_code_malveillant_via_SQL_req <-- TRUE;
	  a_posteriori_detection
		IF ((required OF evoie_code_malveillant_via_SQL_req AND (NOT
		  detected OF evoie_code_malveillant_via_SQL_req)) AND
		  relevant_evt OF evoie_code_malveillant_via_SQL_req) AND S OF
		  evoie_code_malveillant_via_SQL_req
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF evoie_code_malveillant_via_SQL_req <--
			TRUE;

OBJECT exec_code_malveillant IS_A ise_leaf;
	INTERFACE
	  fathers
		= infection_BD;
	  triggered_by
		= evoie_code_malveillant_via_SQL_req;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  gamma_S_ND
		DOMAIN REAL
		= 0.1;
	  gamma_S_D
		DOMAIN REAL
		= 0.1;
	  gamma_D_NR
		DOMAIN REAL
		= 0;
	  gamma_D_R
		DOMAIN REAL
		= 0;
	  when_to_check
		DOMAIN 'not_req_to_req' 'req_to_not_req'
		= 'not_req_to_req';
	ATTRIBUTE
	  flag
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  ise_nd_real
		LABEL "realization undetected of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	  ise_d_real
		LABEL "realization detected of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF exec_code_malveillant <-- S OF
		  exec_code_malveillant;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF infection_BD) OR (NOT S OF
		  evoie_code_malveillant_via_SQL_req)
		THEN required OF exec_code_malveillant <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF infection_BD AND (NOT S OF infection_BD)
		THEN relevant_evt OF exec_code_malveillant <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF infection_BD
		THEN detected OF exec_code_malveillant <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF exec_code_malveillant
		THEN final OF exec_code_malveillant <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF (ise_d_real OF exec_code_malveillant = TRUE) OR (ise_nd_real
		  OF exec_code_malveillant = TRUE)
		THEN S OF exec_code_malveillant <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF ((ise_d_real OF exec_code_malveillant = TRUE) OR (
		  ise_nd_real OF exec_code_malveillant = TRUE)) AND required
		  OF exec_code_malveillant
		THEN S OF exec_code_malveillant <-- TRUE;
	OCCURRENCE
	  real_nd
		IF (ise_nd_real OF exec_code_malveillant = FALSE) AND ((((((NOT
		  detected OF exec_code_malveillant) AND (NOT flag OF
		  exec_code_malveillant)) AND (NOT S OF exec_code_malveillant))
		   AND required OF exec_code_malveillant) AND relevant_evt OF
		  exec_code_malveillant) AND (final OF
		  evoie_code_malveillant_via_SQL_req OR final OF infection_BD))
		MAY_OCCUR
		  FAULT ise_nd_real
		  DIST INS (0.1)
		  INDUCING ise_nd_real OF exec_code_malveillant <-- TRUE,
			flag OF exec_code_malveillant <-- TRUE
		OR_ELSE
		  TRANSITION no_realization
		  LABEL "no realization undetected of step %OBJECT"
		  DIST INS (0.9)
		  INDUCING flag OF exec_code_malveillant <-- TRUE;
	  real_d
		IF (ise_d_real OF exec_code_malveillant = FALSE) AND (((((
		  detected OF exec_code_malveillant AND (NOT flag OF
		  exec_code_malveillant)) AND (NOT S OF exec_code_malveillant))
		   AND required OF exec_code_malveillant) AND relevant_evt OF
		  exec_code_malveillant) AND (final OF
		  evoie_code_malveillant_via_SQL_req OR final OF infection_BD))
		MAY_OCCUR
		  FAULT ise_d_real
		  DIST INS (0.1)
		  INDUCING ise_d_real OF exec_code_malveillant <-- TRUE,
			flag OF exec_code_malveillant <-- TRUE
		OR_ELSE
		  TRANSITION no_realization
		  LABEL "no realization detected of step %OBJECT"
		  DIST INS (0.9)
		  INDUCING flag OF exec_code_malveillant <-- TRUE;
	  det_real
		IF ((((NOT detected OF exec_code_malveillant) AND flag OF
		  exec_code_malveillant) AND S OF exec_code_malveillant) AND
		  required OF exec_code_malveillant) AND relevant_evt OF
		  exec_code_malveillant
		MAY_OCCUR
		  TRANSITION ise_real_det
		  LABEL "detection realized of step %OBJECT"
		  DIST INS (0)
		  INDUCING final OF exec_code_malveillant <-- TRUE
		OR_ELSE
		  TRANSITION ise_real_no_det
		  LABEL "no detection realized of step %OBJECT"
		  DIST INS (1)
		  INDUCING final OF exec_code_malveillant <-- TRUE;
	  det_not_real
		IF (((((NOT detected OF exec_code_malveillant) AND flag OF
		  exec_code_malveillant) AND (NOT S OF exec_code_malveillant))
		  AND required OF exec_code_malveillant) AND (NOT final OF
		  exec_code_malveillant)) AND relevant_evt OF
		  exec_code_malveillant
		MAY_OCCUR
		  TRANSITION ise_no_real_det
		  LABEL "detection not realized of step %OBJECT"
		  DIST INS (0)
		  INDUCING final OF exec_code_malveillant <-- TRUE
		OR_ELSE
		  TRANSITION ise_no_real_no_det
		  LABEL "no detection not realized of step %OBJECT"
		  DIST INS (1)
		  INDUCING final OF exec_code_malveillant <-- TRUE;

OBJECT execution_module_principal IS_A and_gate;
	INTERFACE
	  sons
		= Proliferation_et_MAJ lancer_rootkit;
	  fathers
		= self_installation;
	  triggered_by
		= escalation_of_preveleges;
	  triggers
		= systeme_Windows_infecte;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF execution_module_principal <-- S OF
		  execution_module_principal;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF self_installation) OR (NOT S OF
		  escalation_of_preveleges)
		THEN required OF execution_module_principal <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF self_installation AND (NOT S OF
		  self_installation)) OR (relevant_evt OF
		  systeme_Windows_infecte AND (NOT S OF
		  systeme_Windows_infecte))
		THEN relevant_evt OF execution_module_principal <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (detected OF Proliferation_et_MAJ OR detected OF
		  lancer_rootkit) OR detected OF self_installation
		THEN detected OF execution_module_principal <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF execution_module_principal
		THEN final OF execution_module_principal <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF escalation_of_preveleges AND final OF
		  self_installation
		THEN final OF execution_module_principal <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF (S OF Proliferation_et_MAJ AND final OF Proliferation_et_MAJ)
		   AND (S OF lancer_rootkit AND final OF lancer_rootkit)
		THEN S OF execution_module_principal <-- TRUE,
		  final OF execution_module_principal <-- TRUE;

OBJECT falcifier_signaux_sortie IS_A aa_leaf;
	INTERFACE
	  fathers
		= syst_400;
	  triggered_by
		= intercepter_signaux_entree_sortie_PLC;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF falcifier_signaux_sortie <-- S OF
		  falcifier_signaux_sortie;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF syst_400) OR (NOT S OF
		  intercepter_signaux_entree_sortie_PLC)
		THEN required OF falcifier_signaux_sortie <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF syst_400 AND (NOT S OF syst_400)
		THEN relevant_evt OF falcifier_signaux_sortie <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF syst_400
		THEN detected OF falcifier_signaux_sortie <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF falcifier_signaux_sortie
		THEN final OF falcifier_signaux_sortie <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF falcifier_signaux_sortie = TRUE
		THEN S OF falcifier_signaux_sortie <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF falcifier_signaux_sortie = TRUE) AND required
		  OF falcifier_signaux_sortie
		THEN S OF falcifier_signaux_sortie <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF falcifier_signaux_sortie = FALSE) AND (((
		  required OF falcifier_signaux_sortie AND (NOT detected OF
		  falcifier_signaux_sortie)) AND (NOT S OF
		  falcifier_signaux_sortie)) AND relevant_evt OF
		  falcifier_signaux_sortie)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF falcifier_signaux_sortie <-- TRUE;
	  success_detected
		IF (aa_success OF falcifier_signaux_sortie = FALSE) AND (((
		  required OF falcifier_signaux_sortie AND detected OF
		  falcifier_signaux_sortie) AND (NOT S OF
		  falcifier_signaux_sortie)) AND relevant_evt OF
		  falcifier_signaux_sortie)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF falcifier_signaux_sortie <-- TRUE;
	  initial_detection
		IF (((((required OF falcifier_signaux_sortie AND (NOT detected
		  OF falcifier_signaux_sortie)) AND relevant_evt OF
		  falcifier_signaux_sortie) AND (NOT flagI OF
		  falcifier_signaux_sortie)) AND (NOT S OF
		  falcifier_signaux_sortie)) AND final OF
		  intercepter_signaux_entree_sortie_PLC) AND final OF syst_400
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF falcifier_signaux_sortie <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF falcifier_signaux_sortie <-- TRUE;
	  ongoing_detection
		IF ((required OF falcifier_signaux_sortie AND (NOT detected OF
		  falcifier_signaux_sortie)) AND relevant_evt OF
		  falcifier_signaux_sortie) AND (NOT S OF
		  falcifier_signaux_sortie)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF falcifier_signaux_sortie <-- TRUE;
	  final_detection
		IF (((required OF falcifier_signaux_sortie AND (NOT detected OF
		  falcifier_signaux_sortie)) AND relevant_evt OF
		  falcifier_signaux_sortie) AND S OF falcifier_signaux_sortie)
		  AND (NOT flagF OF falcifier_signaux_sortie)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF falcifier_signaux_sortie <-- TRUE,
			final OF falcifier_signaux_sortie <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF falcifier_signaux_sortie <-- TRUE,
			final OF falcifier_signaux_sortie <-- TRUE;
	  a_posteriori_detection
		IF ((required OF falcifier_signaux_sortie AND (NOT detected OF
		  falcifier_signaux_sortie)) AND relevant_evt OF
		  falcifier_signaux_sortie) AND S OF falcifier_signaux_sortie
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF falcifier_signaux_sortie <-- TRUE;

OBJECT filtrer_fichier.lnk IS_A aa_leaf;
	INTERFACE
	  fathers
		= Modification_systeme;
	  triggered_by
		= inject_code_processus;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF filtrer_fichier.lnk <-- S OF
		  filtrer_fichier.lnk;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF Modification_systeme) OR (NOT S OF
		  inject_code_processus)
		THEN required OF filtrer_fichier.lnk <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF Modification_systeme AND (NOT S OF
		  Modification_systeme)
		THEN relevant_evt OF filtrer_fichier.lnk <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF Modification_systeme
		THEN detected OF filtrer_fichier.lnk <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF filtrer_fichier.lnk
		THEN final OF filtrer_fichier.lnk <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF filtrer_fichier.lnk = TRUE
		THEN S OF filtrer_fichier.lnk <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF filtrer_fichier.lnk = TRUE) AND required OF
		  filtrer_fichier.lnk
		THEN S OF filtrer_fichier.lnk <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF filtrer_fichier.lnk = FALSE) AND (((required
		  OF filtrer_fichier.lnk AND (NOT detected OF
		  filtrer_fichier.lnk)) AND (NOT S OF filtrer_fichier.lnk))
		  AND relevant_evt OF filtrer_fichier.lnk)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF filtrer_fichier.lnk <-- TRUE;
	  success_detected
		IF (aa_success OF filtrer_fichier.lnk = FALSE) AND (((required
		  OF filtrer_fichier.lnk AND detected OF filtrer_fichier.lnk)
		  AND (NOT S OF filtrer_fichier.lnk)) AND relevant_evt OF
		  filtrer_fichier.lnk)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF filtrer_fichier.lnk <-- TRUE;
	  initial_detection
		IF (((((required OF filtrer_fichier.lnk AND (NOT detected OF
		  filtrer_fichier.lnk)) AND relevant_evt OF
		  filtrer_fichier.lnk) AND (NOT flagI OF filtrer_fichier.lnk))
		  AND (NOT S OF filtrer_fichier.lnk)) AND final OF
		  inject_code_processus) AND final OF Modification_systeme
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF filtrer_fichier.lnk <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF filtrer_fichier.lnk <-- TRUE;
	  ongoing_detection
		IF ((required OF filtrer_fichier.lnk AND (NOT detected OF
		  filtrer_fichier.lnk)) AND relevant_evt OF
		  filtrer_fichier.lnk) AND (NOT S OF filtrer_fichier.lnk)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF filtrer_fichier.lnk <-- TRUE;
	  final_detection
		IF (((required OF filtrer_fichier.lnk AND (NOT detected OF
		  filtrer_fichier.lnk)) AND relevant_evt OF
		  filtrer_fichier.lnk) AND S OF filtrer_fichier.lnk) AND (NOT
		  flagF OF filtrer_fichier.lnk)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF filtrer_fichier.lnk <-- TRUE,
			final OF filtrer_fichier.lnk <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF filtrer_fichier.lnk <-- TRUE,
			final OF filtrer_fichier.lnk <-- TRUE;
	  a_posteriori_detection
		IF ((required OF filtrer_fichier.lnk AND (NOT detected OF
		  filtrer_fichier.lnk)) AND relevant_evt OF
		  filtrer_fichier.lnk) AND S OF filtrer_fichier.lnk
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF filtrer_fichier.lnk <-- TRUE;

OBJECT infection_BD IS_A and_gate;
	INTERFACE
	  sons
		= connection_BD_via_pwd evoie_code_malveillant_via_SQL_req exec_code_malveillant recheche_WinCC;
	  fathers
		= systeme_Windows_infecte;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF infection_BD <-- S OF infection_BD;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF systeme_Windows_infecte
		THEN required OF infection_BD <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF systeme_Windows_infecte AND (NOT S OF
		  systeme_Windows_infecte)
		THEN relevant_evt OF infection_BD <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (((detected OF connection_BD_via_pwd OR detected OF
		  evoie_code_malveillant_via_SQL_req) OR detected OF
		  exec_code_malveillant) OR detected OF recheche_WinCC) OR
		  detected OF systeme_Windows_infecte
		THEN detected OF infection_BD <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF infection_BD
		THEN final OF infection_BD <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF systeme_Windows_infecte
		THEN final OF infection_BD <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF (((S OF connection_BD_via_pwd AND final OF
		  connection_BD_via_pwd) AND (S OF
		  evoie_code_malveillant_via_SQL_req AND final OF
		  evoie_code_malveillant_via_SQL_req)) AND (S OF
		  exec_code_malveillant AND final OF exec_code_malveillant))
		  AND (S OF recheche_WinCC AND final OF recheche_WinCC)
		THEN S OF infection_BD <-- TRUE,
		  final OF infection_BD <-- TRUE;

OBJECT infection_fichiers_projets_WinCC_Step7 IS_A and_gate;
	INTERFACE
	  sons
		= Decrypt_data Load_DLL load_Exec_malware ouverture_fichier_projet_par_utilisateur;
	  fathers
		= systeme_Windows_infecte;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF infection_fichiers_projets_WinCC_Step7 <-- S
		  OF infection_fichiers_projets_WinCC_Step7;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF systeme_Windows_infecte
		THEN required OF infection_fichiers_projets_WinCC_Step7 <--
		  FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF systeme_Windows_infecte AND (NOT S OF
		  systeme_Windows_infecte)
		THEN relevant_evt OF infection_fichiers_projets_WinCC_Step7 <--
		  TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (((detected OF Decrypt_data OR detected OF Load_DLL) OR
		  detected OF load_Exec_malware) OR detected OF
		  ouverture_fichier_projet_par_utilisateur) OR detected OF
		  systeme_Windows_infecte
		THEN detected OF infection_fichiers_projets_WinCC_Step7 <--
		  TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF infection_fichiers_projets_WinCC_Step7
		THEN final OF infection_fichiers_projets_WinCC_Step7 <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF systeme_Windows_infecte
		THEN final OF infection_fichiers_projets_WinCC_Step7 <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF (((S OF Decrypt_data AND final OF Decrypt_data) AND (S OF
		  Load_DLL AND final OF Load_DLL)) AND (S OF load_Exec_malware
		  AND final OF load_Exec_malware)) AND (S OF
		  ouverture_fichier_projet_par_utilisateur AND final OF
		  ouverture_fichier_projet_par_utilisateur)
		THEN S OF infection_fichiers_projets_WinCC_Step7 <-- TRUE,
		  final OF infection_fichiers_projets_WinCC_Step7 <-- TRUE;

OBJECT infiltration IS_A or_gate;
	INTERFACE
	  sons
		= via_LAN via_Simens_Project_Files via_removable_media;
	  fathers
		= Network_compromised;
	  triggers
		= self_installation;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF infiltration <-- S OF infiltration;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF Network_compromised
		THEN required OF infiltration <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF Network_compromised AND (NOT S OF
		  Network_compromised)) OR (relevant_evt OF self_installation
		  AND (NOT S OF self_installation))
		THEN relevant_evt OF infiltration <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF ((detected OF via_LAN OR detected OF
		  via_Simens_Project_Files) OR detected OF via_removable_media)
		   OR detected OF Network_compromised
		THEN detected OF infiltration <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF infiltration
		THEN final OF infiltration <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF Network_compromised
		THEN final OF infiltration <-- TRUE;
	  or
		GROUP simu_group
		STEP propagate_effect_S
		IF ((S OF via_LAN AND final OF via_LAN) OR (S OF
		  via_Simens_Project_Files AND final OF
		  via_Simens_Project_Files)) OR (S OF via_removable_media AND
		  final OF via_removable_media)
		THEN S OF infiltration <-- TRUE,
		  final OF infiltration <-- TRUE;

OBJECT inject_code_processus IS_A aa_leaf;
	INTERFACE
	  fathers
		= Modification_systeme;
	  triggered_by
		= install_pilotes_syst_signes;
	  triggers
		= filtrer_fichier.lnk;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF inject_code_processus <-- S OF
		  inject_code_processus;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF Modification_systeme) OR (NOT S OF
		  install_pilotes_syst_signes)
		THEN required OF inject_code_processus <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF Modification_systeme AND (NOT S OF
		  Modification_systeme)) OR (relevant_evt OF
		  filtrer_fichier.lnk AND (NOT S OF filtrer_fichier.lnk))
		THEN relevant_evt OF inject_code_processus <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF Modification_systeme
		THEN detected OF inject_code_processus <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF inject_code_processus
		THEN final OF inject_code_processus <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF inject_code_processus = TRUE
		THEN S OF inject_code_processus <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF inject_code_processus = TRUE) AND required OF
		  inject_code_processus
		THEN S OF inject_code_processus <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF inject_code_processus = FALSE) AND (((
		  required OF inject_code_processus AND (NOT detected OF
		  inject_code_processus)) AND (NOT S OF inject_code_processus))
		   AND relevant_evt OF inject_code_processus)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF inject_code_processus <-- TRUE;
	  success_detected
		IF (aa_success OF inject_code_processus = FALSE) AND (((
		  required OF inject_code_processus AND detected OF
		  inject_code_processus) AND (NOT S OF inject_code_processus))
		  AND relevant_evt OF inject_code_processus)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF inject_code_processus <-- TRUE;
	  initial_detection
		IF (((((required OF inject_code_processus AND (NOT detected OF
		  inject_code_processus)) AND relevant_evt OF
		  inject_code_processus) AND (NOT flagI OF
		  inject_code_processus)) AND (NOT S OF inject_code_processus))
		   AND final OF install_pilotes_syst_signes) AND final OF
		  Modification_systeme
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF inject_code_processus <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF inject_code_processus <-- TRUE;
	  ongoing_detection
		IF ((required OF inject_code_processus AND (NOT detected OF
		  inject_code_processus)) AND relevant_evt OF
		  inject_code_processus) AND (NOT S OF inject_code_processus)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF inject_code_processus <-- TRUE;
	  final_detection
		IF (((required OF inject_code_processus AND (NOT detected OF
		  inject_code_processus)) AND relevant_evt OF
		  inject_code_processus) AND S OF inject_code_processus) AND (
		  NOT flagF OF inject_code_processus)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF inject_code_processus <-- TRUE,
			final OF inject_code_processus <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF inject_code_processus <-- TRUE,
			final OF inject_code_processus <-- TRUE;
	  a_posteriori_detection
		IF ((required OF inject_code_processus AND (NOT detected OF
		  inject_code_processus)) AND relevant_evt OF
		  inject_code_processus) AND S OF inject_code_processus
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF inject_code_processus <-- TRUE;

OBJECT injection_code_dans_processus IS_A aa_leaf;
	INTERFACE
	  fathers
		= lancer_rootkit;
	  triggers
		= cacher_presence_fichiers_malvaillants;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF injection_code_dans_processus <-- S OF
		  injection_code_dans_processus;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF lancer_rootkit
		THEN required OF injection_code_dans_processus <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF lancer_rootkit AND (NOT S OF lancer_rootkit)
		  ) OR (relevant_evt OF cacher_presence_fichiers_malvaillants
		  AND (NOT S OF cacher_presence_fichiers_malvaillants))
		THEN relevant_evt OF injection_code_dans_processus <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF lancer_rootkit
		THEN detected OF injection_code_dans_processus <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF injection_code_dans_processus
		THEN final OF injection_code_dans_processus <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF injection_code_dans_processus = TRUE
		THEN S OF injection_code_dans_processus <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF injection_code_dans_processus = TRUE) AND
		  required OF injection_code_dans_processus
		THEN S OF injection_code_dans_processus <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF injection_code_dans_processus = FALSE) AND (((
		  required OF injection_code_dans_processus AND (NOT detected
		  OF injection_code_dans_processus)) AND (NOT S OF
		  injection_code_dans_processus)) AND relevant_evt OF
		  injection_code_dans_processus)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF injection_code_dans_processus <-- TRUE;
	  success_detected
		IF (aa_success OF injection_code_dans_processus = FALSE) AND (((
		  required OF injection_code_dans_processus AND detected OF
		  injection_code_dans_processus) AND (NOT S OF
		  injection_code_dans_processus)) AND relevant_evt OF
		  injection_code_dans_processus)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF injection_code_dans_processus <-- TRUE;
	  initial_detection
		IF ((((required OF injection_code_dans_processus AND (NOT
		  detected OF injection_code_dans_processus)) AND relevant_evt
		  OF injection_code_dans_processus) AND (NOT flagI OF
		  injection_code_dans_processus)) AND (NOT S OF
		  injection_code_dans_processus)) AND final OF lancer_rootkit
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF injection_code_dans_processus <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF injection_code_dans_processus <-- TRUE;
	  ongoing_detection
		IF ((required OF injection_code_dans_processus AND (NOT
		  detected OF injection_code_dans_processus)) AND relevant_evt
		  OF injection_code_dans_processus) AND (NOT S OF
		  injection_code_dans_processus)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF injection_code_dans_processus <-- TRUE;
	  final_detection
		IF (((required OF injection_code_dans_processus AND (NOT
		  detected OF injection_code_dans_processus)) AND relevant_evt
		  OF injection_code_dans_processus) AND S OF
		  injection_code_dans_processus) AND (NOT flagF OF
		  injection_code_dans_processus)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF injection_code_dans_processus <-- TRUE,
			final OF injection_code_dans_processus <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF injection_code_dans_processus <-- TRUE,
			final OF injection_code_dans_processus <-- TRUE;
	  a_posteriori_detection
		IF ((required OF injection_code_dans_processus AND (NOT
		  detected OF injection_code_dans_processus)) AND relevant_evt
		  OF injection_code_dans_processus) AND S OF
		  injection_code_dans_processus
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF injection_code_dans_processus <-- TRUE;

OBJECT install_pilotes_syst_signes IS_A aa_leaf;
	INTERFACE
	  fathers
		= Modification_systeme;
	  triggers
		= inject_code_processus;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF install_pilotes_syst_signes <-- S OF
		  install_pilotes_syst_signes;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF Modification_systeme
		THEN required OF install_pilotes_syst_signes <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF Modification_systeme AND (NOT S OF
		  Modification_systeme)) OR (relevant_evt OF
		  inject_code_processus AND (NOT S OF inject_code_processus))
		THEN relevant_evt OF install_pilotes_syst_signes <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF Modification_systeme
		THEN detected OF install_pilotes_syst_signes <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF install_pilotes_syst_signes
		THEN final OF install_pilotes_syst_signes <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF install_pilotes_syst_signes = TRUE
		THEN S OF install_pilotes_syst_signes <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF install_pilotes_syst_signes = TRUE) AND
		  required OF install_pilotes_syst_signes
		THEN S OF install_pilotes_syst_signes <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF install_pilotes_syst_signes = FALSE) AND (((
		  required OF install_pilotes_syst_signes AND (NOT detected OF
		  install_pilotes_syst_signes)) AND (NOT S OF
		  install_pilotes_syst_signes)) AND relevant_evt OF
		  install_pilotes_syst_signes)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF install_pilotes_syst_signes <-- TRUE;
	  success_detected
		IF (aa_success OF install_pilotes_syst_signes = FALSE) AND (((
		  required OF install_pilotes_syst_signes AND detected OF
		  install_pilotes_syst_signes) AND (NOT S OF
		  install_pilotes_syst_signes)) AND relevant_evt OF
		  install_pilotes_syst_signes)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF install_pilotes_syst_signes <-- TRUE;
	  initial_detection
		IF ((((required OF install_pilotes_syst_signes AND (NOT
		  detected OF install_pilotes_syst_signes)) AND relevant_evt
		  OF install_pilotes_syst_signes) AND (NOT flagI OF
		  install_pilotes_syst_signes)) AND (NOT S OF
		  install_pilotes_syst_signes)) AND final OF
		  Modification_systeme
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF install_pilotes_syst_signes <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF install_pilotes_syst_signes <-- TRUE;
	  ongoing_detection
		IF ((required OF install_pilotes_syst_signes AND (NOT detected
		  OF install_pilotes_syst_signes)) AND relevant_evt OF
		  install_pilotes_syst_signes) AND (NOT S OF
		  install_pilotes_syst_signes)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF install_pilotes_syst_signes <-- TRUE;
	  final_detection
		IF (((required OF install_pilotes_syst_signes AND (NOT detected
		  OF install_pilotes_syst_signes)) AND relevant_evt OF
		  install_pilotes_syst_signes) AND S OF
		  install_pilotes_syst_signes) AND (NOT flagF OF
		  install_pilotes_syst_signes)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF install_pilotes_syst_signes <-- TRUE,
			final OF install_pilotes_syst_signes <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF install_pilotes_syst_signes <-- TRUE,
			final OF install_pilotes_syst_signes <-- TRUE;
	  a_posteriori_detection
		IF ((required OF install_pilotes_syst_signes AND (NOT detected
		  OF install_pilotes_syst_signes)) AND relevant_evt OF
		  install_pilotes_syst_signes) AND S OF
		  install_pilotes_syst_signes
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF install_pilotes_syst_signes <-- TRUE;

OBJECT intercepter_signaux_entree_sortie_PLC IS_A aa_leaf;
	INTERFACE
	  fathers
		= syst_400;
	  triggers
		= falcifier_signaux_sortie;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF intercepter_signaux_entree_sortie_PLC <-- S
		  OF intercepter_signaux_entree_sortie_PLC;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF syst_400
		THEN required OF intercepter_signaux_entree_sortie_PLC <--
		  FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF syst_400 AND (NOT S OF syst_400)) OR (
		  relevant_evt OF falcifier_signaux_sortie AND (NOT S OF
		  falcifier_signaux_sortie))
		THEN relevant_evt OF intercepter_signaux_entree_sortie_PLC <--
		  TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF syst_400
		THEN detected OF intercepter_signaux_entree_sortie_PLC <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF intercepter_signaux_entree_sortie_PLC
		THEN final OF intercepter_signaux_entree_sortie_PLC <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF intercepter_signaux_entree_sortie_PLC = TRUE
		THEN S OF intercepter_signaux_entree_sortie_PLC <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF intercepter_signaux_entree_sortie_PLC = TRUE)
		  AND required OF intercepter_signaux_entree_sortie_PLC
		THEN S OF intercepter_signaux_entree_sortie_PLC <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF intercepter_signaux_entree_sortie_PLC = FALSE)
		   AND (((required OF intercepter_signaux_entree_sortie_PLC
		  AND (NOT detected OF intercepter_signaux_entree_sortie_PLC))
		  AND (NOT S OF intercepter_signaux_entree_sortie_PLC)) AND
		  relevant_evt OF intercepter_signaux_entree_sortie_PLC)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF intercepter_signaux_entree_sortie_PLC
			<-- TRUE;
	  success_detected
		IF (aa_success OF intercepter_signaux_entree_sortie_PLC = FALSE)
		   AND (((required OF intercepter_signaux_entree_sortie_PLC
		  AND detected OF intercepter_signaux_entree_sortie_PLC) AND (
		  NOT S OF intercepter_signaux_entree_sortie_PLC)) AND
		  relevant_evt OF intercepter_signaux_entree_sortie_PLC)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF intercepter_signaux_entree_sortie_PLC
			<-- TRUE;
	  initial_detection
		IF ((((required OF intercepter_signaux_entree_sortie_PLC AND (
		  NOT detected OF intercepter_signaux_entree_sortie_PLC)) AND
		  relevant_evt OF intercepter_signaux_entree_sortie_PLC) AND (
		  NOT flagI OF intercepter_signaux_entree_sortie_PLC)) AND (
		  NOT S OF intercepter_signaux_entree_sortie_PLC)) AND final
		  OF syst_400
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF intercepter_signaux_entree_sortie_PLC <--
			TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF intercepter_signaux_entree_sortie_PLC
			<-- TRUE;
	  ongoing_detection
		IF ((required OF intercepter_signaux_entree_sortie_PLC AND (NOT
		  detected OF intercepter_signaux_entree_sortie_PLC)) AND
		  relevant_evt OF intercepter_signaux_entree_sortie_PLC) AND (
		  NOT S OF intercepter_signaux_entree_sortie_PLC)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF intercepter_signaux_entree_sortie_PLC
			<-- TRUE;
	  final_detection
		IF (((required OF intercepter_signaux_entree_sortie_PLC AND (
		  NOT detected OF intercepter_signaux_entree_sortie_PLC)) AND
		  relevant_evt OF intercepter_signaux_entree_sortie_PLC) AND S
		  OF intercepter_signaux_entree_sortie_PLC) AND (NOT flagF OF
		  intercepter_signaux_entree_sortie_PLC)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF intercepter_signaux_entree_sortie_PLC <--
			TRUE,
			final OF intercepter_signaux_entree_sortie_PLC <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF intercepter_signaux_entree_sortie_PLC
			<-- TRUE,
			final OF intercepter_signaux_entree_sortie_PLC <-- TRUE;
	  a_posteriori_detection
		IF ((required OF intercepter_signaux_entree_sortie_PLC AND (NOT
		  detected OF intercepter_signaux_entree_sortie_PLC)) AND
		  relevant_evt OF intercepter_signaux_entree_sortie_PLC) AND S
		  OF intercepter_signaux_entree_sortie_PLC
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF intercepter_signaux_entree_sortie_PLC
			<-- TRUE;

OBJECT keyboard_handling IS_A aa_leaf;
	INTERFACE
	  fathers
		= escalation_of_preveleges;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF keyboard_handling <-- S OF keyboard_handling;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF escalation_of_preveleges
		THEN required OF keyboard_handling <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF escalation_of_preveleges AND (NOT S OF
		  escalation_of_preveleges)
		THEN relevant_evt OF keyboard_handling <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF escalation_of_preveleges
		THEN detected OF keyboard_handling <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF keyboard_handling
		THEN final OF keyboard_handling <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF keyboard_handling = TRUE
		THEN S OF keyboard_handling <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF keyboard_handling = TRUE) AND required OF
		  keyboard_handling
		THEN S OF keyboard_handling <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF keyboard_handling = FALSE) AND (((required OF
		  keyboard_handling AND (NOT detected OF keyboard_handling))
		  AND (NOT S OF keyboard_handling)) AND relevant_evt OF
		  keyboard_handling)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF keyboard_handling <-- TRUE;
	  success_detected
		IF (aa_success OF keyboard_handling = FALSE) AND (((required OF
		  keyboard_handling AND detected OF keyboard_handling) AND (
		  NOT S OF keyboard_handling)) AND relevant_evt OF
		  keyboard_handling)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF keyboard_handling <-- TRUE;
	  initial_detection
		IF ((((required OF keyboard_handling AND (NOT detected OF
		  keyboard_handling)) AND relevant_evt OF keyboard_handling)
		  AND (NOT flagI OF keyboard_handling)) AND (NOT S OF
		  keyboard_handling)) AND final OF escalation_of_preveleges
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF keyboard_handling <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF keyboard_handling <-- TRUE;
	  ongoing_detection
		IF ((required OF keyboard_handling AND (NOT detected OF
		  keyboard_handling)) AND relevant_evt OF keyboard_handling)
		  AND (NOT S OF keyboard_handling)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF keyboard_handling <-- TRUE;
	  final_detection
		IF (((required OF keyboard_handling AND (NOT detected OF
		  keyboard_handling)) AND relevant_evt OF keyboard_handling)
		  AND S OF keyboard_handling) AND (NOT flagF OF
		  keyboard_handling)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF keyboard_handling <-- TRUE,
			final OF keyboard_handling <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF keyboard_handling <-- TRUE,
			final OF keyboard_handling <-- TRUE;
	  a_posteriori_detection
		IF ((required OF keyboard_handling AND (NOT detected OF
		  keyboard_handling)) AND relevant_evt OF keyboard_handling)
		  AND S OF keyboard_handling
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF keyboard_handling <-- TRUE;

OBJECT lancer_rootkit IS_A and_gate;
	INTERFACE
	  sons
		= cacher_presence_fichiers_malvaillants injection_code_dans_processus;
	  fathers
		= execution_module_principal;
	  triggers
		= Proliferation_et_MAJ;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF lancer_rootkit <-- S OF lancer_rootkit;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF execution_module_principal
		THEN required OF lancer_rootkit <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF execution_module_principal AND (NOT S OF
		  execution_module_principal)) OR (relevant_evt OF
		  Proliferation_et_MAJ AND (NOT S OF Proliferation_et_MAJ))
		THEN relevant_evt OF lancer_rootkit <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (detected OF cacher_presence_fichiers_malvaillants OR
		  detected OF injection_code_dans_processus) OR detected OF
		  execution_module_principal
		THEN detected OF lancer_rootkit <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF lancer_rootkit
		THEN final OF lancer_rootkit <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF execution_module_principal
		THEN final OF lancer_rootkit <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF (S OF cacher_presence_fichiers_malvaillants AND final OF
		  cacher_presence_fichiers_malvaillants) AND (S OF
		  injection_code_dans_processus AND final OF
		  injection_code_dans_processus)
		THEN S OF lancer_rootkit <-- TRUE,
		  final OF lancer_rootkit <-- TRUE;

OBJECT load_Exec_malware IS_A ise_leaf;
	INTERFACE
	  fathers
		= infection_fichiers_projets_WinCC_Step7;
	  triggered_by
		= Decrypt_data;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  gamma_S_ND
		DOMAIN REAL
		= 0.1;
	  gamma_S_D
		DOMAIN REAL
		= 0.1;
	  gamma_D_NR
		DOMAIN REAL
		= 0;
	  gamma_D_R
		DOMAIN REAL
		= 0;
	  when_to_check
		DOMAIN 'not_req_to_req' 'req_to_not_req'
		= 'not_req_to_req';
	ATTRIBUTE
	  flag
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  ise_nd_real
		LABEL "realization undetected of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	  ise_d_real
		LABEL "realization detected of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF load_Exec_malware <-- S OF load_Exec_malware;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF infection_fichiers_projets_WinCC_Step7) OR (
		  NOT S OF Decrypt_data)
		THEN required OF load_Exec_malware <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF infection_fichiers_projets_WinCC_Step7 AND (
		  NOT S OF infection_fichiers_projets_WinCC_Step7)
		THEN relevant_evt OF load_Exec_malware <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF infection_fichiers_projets_WinCC_Step7
		THEN detected OF load_Exec_malware <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF load_Exec_malware
		THEN final OF load_Exec_malware <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF (ise_d_real OF load_Exec_malware = TRUE) OR (ise_nd_real OF
		  load_Exec_malware = TRUE)
		THEN S OF load_Exec_malware <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF ((ise_d_real OF load_Exec_malware = TRUE) OR (ise_nd_real OF
		  load_Exec_malware = TRUE)) AND required OF load_Exec_malware
		THEN S OF load_Exec_malware <-- TRUE;
	OCCURRENCE
	  real_nd
		IF (ise_nd_real OF load_Exec_malware = FALSE) AND ((((((NOT
		  detected OF load_Exec_malware) AND (NOT flag OF
		  load_Exec_malware)) AND (NOT S OF load_Exec_malware)) AND
		  required OF load_Exec_malware) AND relevant_evt OF
		  load_Exec_malware) AND (final OF Decrypt_data OR final OF
		  infection_fichiers_projets_WinCC_Step7))
		MAY_OCCUR
		  FAULT ise_nd_real
		  DIST INS (0.1)
		  INDUCING ise_nd_real OF load_Exec_malware <-- TRUE,
			flag OF load_Exec_malware <-- TRUE
		OR_ELSE
		  TRANSITION no_realization
		  LABEL "no realization undetected of step %OBJECT"
		  DIST INS (0.9)
		  INDUCING flag OF load_Exec_malware <-- TRUE;
	  real_d
		IF (ise_d_real OF load_Exec_malware = FALSE) AND (((((detected
		  OF load_Exec_malware AND (NOT flag OF load_Exec_malware))
		  AND (NOT S OF load_Exec_malware)) AND required OF
		  load_Exec_malware) AND relevant_evt OF load_Exec_malware)
		  AND (final OF Decrypt_data OR final OF
		  infection_fichiers_projets_WinCC_Step7))
		MAY_OCCUR
		  FAULT ise_d_real
		  DIST INS (0.1)
		  INDUCING ise_d_real OF load_Exec_malware <-- TRUE,
			flag OF load_Exec_malware <-- TRUE
		OR_ELSE
		  TRANSITION no_realization
		  LABEL "no realization detected of step %OBJECT"
		  DIST INS (0.9)
		  INDUCING flag OF load_Exec_malware <-- TRUE;
	  det_real
		IF ((((NOT detected OF load_Exec_malware) AND flag OF
		  load_Exec_malware) AND S OF load_Exec_malware) AND required
		  OF load_Exec_malware) AND relevant_evt OF load_Exec_malware
		MAY_OCCUR
		  TRANSITION ise_real_det
		  LABEL "detection realized of step %OBJECT"
		  DIST INS (0)
		  INDUCING final OF load_Exec_malware <-- TRUE
		OR_ELSE
		  TRANSITION ise_real_no_det
		  LABEL "no detection realized of step %OBJECT"
		  DIST INS (1)
		  INDUCING final OF load_Exec_malware <-- TRUE;
	  det_not_real
		IF (((((NOT detected OF load_Exec_malware) AND flag OF
		  load_Exec_malware) AND (NOT S OF load_Exec_malware)) AND
		  required OF load_Exec_malware) AND (NOT final OF
		  load_Exec_malware)) AND relevant_evt OF load_Exec_malware
		MAY_OCCUR
		  TRANSITION ise_no_real_det
		  LABEL "detection not realized of step %OBJECT"
		  DIST INS (0)
		  INDUCING final OF load_Exec_malware <-- TRUE
		OR_ELSE
		  TRANSITION ise_no_real_no_det
		  LABEL "no detection not realized of step %OBJECT"
		  DIST INS (1)
		  INDUCING final OF load_Exec_malware <-- TRUE;

OBJECT logic_1 IS_A logic_link;

OBJECT logic_10 IS_A logic_link;

OBJECT logic_10_1 IS_A logic_link;

OBJECT logic_10_2 IS_A logic_link;

OBJECT logic_11 IS_A logic_link;

OBJECT logic_11_1 IS_A logic_link;

OBJECT logic_11_2 IS_A logic_link;

OBJECT logic_12 IS_A logic_link;

OBJECT logic_12_1 IS_A logic_link;

OBJECT logic_12_2 IS_A logic_link;

OBJECT logic_13 IS_A logic_link;

OBJECT logic_13_2 IS_A logic_link;

OBJECT logic_14_1 IS_A logic_link;

OBJECT logic_15 IS_A logic_link;

OBJECT logic_15_1 IS_A logic_link;

OBJECT logic_16 IS_A logic_link;

OBJECT logic_16_1 IS_A logic_link;

OBJECT logic_17 IS_A logic_link;

OBJECT logic_17_1 IS_A logic_link;

OBJECT logic_18 IS_A logic_link;

OBJECT logic_18_1 IS_A logic_link;

OBJECT logic_19 IS_A logic_link;

OBJECT logic_19_1 IS_A logic_link;

OBJECT logic_2 IS_A logic_link;

OBJECT logic_20 IS_A logic_link;

OBJECT logic_20_1 IS_A logic_link;

OBJECT logic_20_2 IS_A logic_link;

OBJECT logic_21 IS_A logic_link;

OBJECT logic_21_1 IS_A logic_link;

OBJECT logic_22 IS_A logic_link;

OBJECT logic_22_1 IS_A logic_link;

OBJECT logic_22_2 IS_A logic_link;

OBJECT logic_23 IS_A logic_link;

OBJECT logic_24 IS_A logic_link;

OBJECT logic_24_1 IS_A logic_link;

OBJECT logic_24_2 IS_A logic_link;

OBJECT logic_25 IS_A logic_link;

OBJECT logic_25_1 IS_A logic_link;

OBJECT logic_26 IS_A logic_link;

OBJECT logic_26_1 IS_A logic_link;

OBJECT logic_27 IS_A logic_link;

OBJECT logic_27_1 IS_A logic_link;

OBJECT logic_28 IS_A logic_link;

OBJECT logic_29 IS_A logic_link;

OBJECT logic_29_1 IS_A logic_link;

OBJECT logic_2_1 IS_A logic_link;

OBJECT logic_2_2 IS_A logic_link;

OBJECT logic_3 IS_A logic_link;

OBJECT logic_30 IS_A logic_link;

OBJECT logic_31 IS_A logic_link;

OBJECT logic_32 IS_A logic_link;

OBJECT logic_3_1 IS_A logic_link;

OBJECT logic_3_2 IS_A logic_link;

OBJECT logic_4 IS_A logic_link;

OBJECT logic_4_1 IS_A logic_link;

OBJECT logic_4_2 IS_A logic_link;

OBJECT logic_5 IS_A logic_link;

OBJECT logic_5_1 IS_A logic_link;

OBJECT logic_6 IS_A logic_link;

OBJECT logic_6_1 IS_A logic_link;

OBJECT logic_6_2 IS_A logic_link;

OBJECT logic_7 IS_A logic_link;

OBJECT logic_7_1 IS_A logic_link;

OBJECT logic_7_2 IS_A logic_link;

OBJECT logic_8 IS_A logic_link;

OBJECT logic_8_1 IS_A logic_link;

OBJECT logic_9 IS_A logic_link;

OBJECT logic_9_1 IS_A logic_link;

OBJECT modify_PLC_function_bloks IS_A aa_leaf;
	INTERFACE
	  fathers
		= PLC_compromised;
	  triggered_by
		= check_config;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF modify_PLC_function_bloks <-- S OF
		  modify_PLC_function_bloks;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF PLC_compromised) OR (NOT S OF check_config)
		THEN required OF modify_PLC_function_bloks <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF PLC_compromised AND (NOT S OF
		  PLC_compromised)
		THEN relevant_evt OF modify_PLC_function_bloks <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF PLC_compromised
		THEN detected OF modify_PLC_function_bloks <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF modify_PLC_function_bloks
		THEN final OF modify_PLC_function_bloks <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF modify_PLC_function_bloks = TRUE
		THEN S OF modify_PLC_function_bloks <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF modify_PLC_function_bloks = TRUE) AND
		  required OF modify_PLC_function_bloks
		THEN S OF modify_PLC_function_bloks <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF modify_PLC_function_bloks = FALSE) AND (((
		  required OF modify_PLC_function_bloks AND (NOT detected OF
		  modify_PLC_function_bloks)) AND (NOT S OF
		  modify_PLC_function_bloks)) AND relevant_evt OF
		  modify_PLC_function_bloks)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF modify_PLC_function_bloks <-- TRUE;
	  success_detected
		IF (aa_success OF modify_PLC_function_bloks = FALSE) AND (((
		  required OF modify_PLC_function_bloks AND detected OF
		  modify_PLC_function_bloks) AND (NOT S OF
		  modify_PLC_function_bloks)) AND relevant_evt OF
		  modify_PLC_function_bloks)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF modify_PLC_function_bloks <-- TRUE;
	  initial_detection
		IF (((((required OF modify_PLC_function_bloks AND (NOT detected
		  OF modify_PLC_function_bloks)) AND relevant_evt OF
		  modify_PLC_function_bloks) AND (NOT flagI OF
		  modify_PLC_function_bloks)) AND (NOT S OF
		  modify_PLC_function_bloks)) AND final OF check_config) AND
		  final OF PLC_compromised
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF modify_PLC_function_bloks <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF modify_PLC_function_bloks <-- TRUE;
	  ongoing_detection
		IF ((required OF modify_PLC_function_bloks AND (NOT detected OF
		  modify_PLC_function_bloks)) AND relevant_evt OF
		  modify_PLC_function_bloks) AND (NOT S OF
		  modify_PLC_function_bloks)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF modify_PLC_function_bloks <-- TRUE;
	  final_detection
		IF (((required OF modify_PLC_function_bloks AND (NOT detected
		  OF modify_PLC_function_bloks)) AND relevant_evt OF
		  modify_PLC_function_bloks) AND S OF
		  modify_PLC_function_bloks) AND (NOT flagF OF
		  modify_PLC_function_bloks)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF modify_PLC_function_bloks <-- TRUE,
			final OF modify_PLC_function_bloks <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF modify_PLC_function_bloks <-- TRUE,
			final OF modify_PLC_function_bloks <-- TRUE;
	  a_posteriori_detection
		IF ((required OF modify_PLC_function_bloks AND (NOT detected OF
		  modify_PLC_function_bloks)) AND relevant_evt OF
		  modify_PLC_function_bloks) AND S OF
		  modify_PLC_function_bloks
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF modify_PLC_function_bloks <-- TRUE;

OBJECT ouverture_fichier_projet_par_utilisateur IS_A tse_leaf;
	INTERFACE
	  fathers
		= infection_fichiers_projets_WinCC_Step7;
	  triggers
		= Load_DLL;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  lambda_S_ND_idle
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D_idle
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I_idle
		DOMAIN REAL
		= 0;
	  lambda_D_O_idle
		DOMAIN REAL
		= 0;
	  gamma_D_F_idle
		DOMAIN REAL
		= 0;
	  lambda_D_A_idle
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	  flagIi
		DOMAIN BOOLEAN
		= FALSE;
	  flagFi
		DOMAIN BOOLEAN
		= FALSE;
	  active
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  tse_real
		LABEL "realization of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF ouverture_fichier_projet_par_utilisateur <--
		  S OF ouverture_fichier_projet_par_utilisateur;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF infection_fichiers_projets_WinCC_Step7
		THEN required OF ouverture_fichier_projet_par_utilisateur <--
		  FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF infection_fichiers_projets_WinCC_Step7 AND (
		  NOT S OF infection_fichiers_projets_WinCC_Step7)) OR (
		  relevant_evt OF Load_DLL AND (NOT S OF Load_DLL))
		THEN relevant_evt OF ouverture_fichier_projet_par_utilisateur
		  <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF infection_fichiers_projets_WinCC_Step7
		THEN detected OF ouverture_fichier_projet_par_utilisateur <--
		  TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF ouverture_fichier_projet_par_utilisateur
		THEN final OF ouverture_fichier_projet_par_utilisateur <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF tse_real OF ouverture_fichier_projet_par_utilisateur = TRUE
		THEN S OF ouverture_fichier_projet_par_utilisateur <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (tse_real OF ouverture_fichier_projet_par_utilisateur = TRUE)
		   AND required OF ouverture_fichier_projet_par_utilisateur
		THEN S OF ouverture_fichier_projet_par_utilisateur <-- TRUE;
	  activation
		GROUP simu_group
		STEP tops
		IF required OF ouverture_fichier_projet_par_utilisateur
		THEN active OF ouverture_fichier_projet_par_utilisateur <--
		  TRUE;
	OCCURRENCE
	  success_undetected
		IF (tse_real OF ouverture_fichier_projet_par_utilisateur =
		  FALSE) AND ((((required OF
		  ouverture_fichier_projet_par_utilisateur AND (NOT detected
		  OF ouverture_fichier_projet_par_utilisateur)) AND (NOT S OF
		  ouverture_fichier_projet_par_utilisateur)) AND active OF
		  ouverture_fichier_projet_par_utilisateur) AND relevant_evt
		  OF ouverture_fichier_projet_par_utilisateur)
		MAY_OCCUR
		  FAULT tse_real
		  LABEL "realization undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING tse_real OF ouverture_fichier_projet_par_utilisateur
			<-- TRUE;
	  success_detected
		IF (tse_real OF ouverture_fichier_projet_par_utilisateur =
		  FALSE) AND ((((required OF
		  ouverture_fichier_projet_par_utilisateur AND detected OF
		  ouverture_fichier_projet_par_utilisateur) AND (NOT S OF
		  ouverture_fichier_projet_par_utilisateur)) AND active OF
		  ouverture_fichier_projet_par_utilisateur) AND relevant_evt
		  OF ouverture_fichier_projet_par_utilisateur)
		MAY_OCCUR
		  FAULT tse_real
		  LABEL "realization detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING tse_real OF ouverture_fichier_projet_par_utilisateur
			<-- TRUE;
	  initial_detection
		IF (((((required OF ouverture_fichier_projet_par_utilisateur
		  AND (NOT detected OF
		  ouverture_fichier_projet_par_utilisateur)) AND relevant_evt
		  OF ouverture_fichier_projet_par_utilisateur) AND (NOT S OF
		  ouverture_fichier_projet_par_utilisateur)) AND (NOT flagI OF
		  ouverture_fichier_projet_par_utilisateur)) AND active OF
		  ouverture_fichier_projet_par_utilisateur) AND final OF
		  infection_fichiers_projets_WinCC_Step7
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF ouverture_fichier_projet_par_utilisateur
			<-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF ouverture_fichier_projet_par_utilisateur
			<-- TRUE;
	  ongoing_detection
		IF (((required OF ouverture_fichier_projet_par_utilisateur AND (
		  NOT detected OF ouverture_fichier_projet_par_utilisateur))
		  AND relevant_evt OF ouverture_fichier_projet_par_utilisateur)
		   AND (NOT S OF ouverture_fichier_projet_par_utilisateur))
		  AND active OF ouverture_fichier_projet_par_utilisateur
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF ouverture_fichier_projet_par_utilisateur
			<-- TRUE;
	  final_detection
		IF ((((required OF ouverture_fichier_projet_par_utilisateur AND
		  (NOT detected OF ouverture_fichier_projet_par_utilisateur))
		  AND relevant_evt OF ouverture_fichier_projet_par_utilisateur)
		   AND S OF ouverture_fichier_projet_par_utilisateur) AND (NOT
		  flagF OF ouverture_fichier_projet_par_utilisateur)) AND
		  active OF ouverture_fichier_projet_par_utilisateur
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF ouverture_fichier_projet_par_utilisateur
			<-- TRUE,
			final OF ouverture_fichier_projet_par_utilisateur <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF ouverture_fichier_projet_par_utilisateur
			<-- TRUE,
			final OF ouverture_fichier_projet_par_utilisateur <-- TRUE;
	  a_posteriori_detection
		IF (((required OF ouverture_fichier_projet_par_utilisateur AND (
		  NOT detected OF ouverture_fichier_projet_par_utilisateur))
		  AND relevant_evt OF ouverture_fichier_projet_par_utilisateur)
		   AND S OF ouverture_fichier_projet_par_utilisateur) AND
		  active OF ouverture_fichier_projet_par_utilisateur
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF ouverture_fichier_projet_par_utilisateur
			<-- TRUE;
	  success_undetected_idle
		IF (tse_real OF ouverture_fichier_projet_par_utilisateur =
		  FALSE) AND (((((NOT required OF
		  ouverture_fichier_projet_par_utilisateur) AND (NOT detected
		  OF ouverture_fichier_projet_par_utilisateur)) AND
		  relevant_evt OF ouverture_fichier_projet_par_utilisateur)
		  AND (NOT S OF ouverture_fichier_projet_par_utilisateur)) AND
		  active OF ouverture_fichier_projet_par_utilisateur)
		MAY_OCCUR
		  FAULT tse_real
		  LABEL "idle realization undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING tse_real OF ouverture_fichier_projet_par_utilisateur
			<-- TRUE;
	  success_detected_idle
		IF (tse_real OF ouverture_fichier_projet_par_utilisateur =
		  FALSE) AND (((((NOT required OF
		  ouverture_fichier_projet_par_utilisateur) AND detected OF
		  ouverture_fichier_projet_par_utilisateur) AND relevant_evt
		  OF ouverture_fichier_projet_par_utilisateur) AND (NOT S OF
		  ouverture_fichier_projet_par_utilisateur)) AND active OF
		  ouverture_fichier_projet_par_utilisateur)
		MAY_OCCUR
		  FAULT tse_real
		  LABEL "idle realization detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING tse_real OF ouverture_fichier_projet_par_utilisateur
			<-- TRUE;
	  initial_detection_idle
		IF ((((((NOT required OF
		  ouverture_fichier_projet_par_utilisateur) AND (NOT detected
		  OF ouverture_fichier_projet_par_utilisateur)) AND
		  relevant_evt OF ouverture_fichier_projet_par_utilisateur)
		  AND (NOT S OF ouverture_fichier_projet_par_utilisateur)) AND
		  (NOT flagIi OF ouverture_fichier_projet_par_utilisateur))
		  AND active OF ouverture_fichier_projet_par_utilisateur) AND
		  final OF infection_fichiers_projets_WinCC_Step7
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagIi OF ouverture_fichier_projet_par_utilisateur
			<-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "idle initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF ouverture_fichier_projet_par_utilisateur
			<-- TRUE;
	  ongoing_detection_idle
		IF ((((NOT required OF ouverture_fichier_projet_par_utilisateur)
		   AND (NOT detected OF
		  ouverture_fichier_projet_par_utilisateur)) AND relevant_evt
		  OF ouverture_fichier_projet_par_utilisateur) AND (NOT S OF
		  ouverture_fichier_projet_par_utilisateur)) AND active OF
		  ouverture_fichier_projet_par_utilisateur
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "idle ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF ouverture_fichier_projet_par_utilisateur
			<-- TRUE;
	  final_detection_idle
		IF (((((NOT required OF
		  ouverture_fichier_projet_par_utilisateur) AND (NOT detected
		  OF ouverture_fichier_projet_par_utilisateur)) AND
		  relevant_evt OF ouverture_fichier_projet_par_utilisateur)
		  AND S OF ouverture_fichier_projet_par_utilisateur) AND (NOT
		  flagFi OF ouverture_fichier_projet_par_utilisateur)) AND
		  active OF ouverture_fichier_projet_par_utilisateur
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagFi OF ouverture_fichier_projet_par_utilisateur
			<-- TRUE,
			final OF ouverture_fichier_projet_par_utilisateur <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "idle final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF ouverture_fichier_projet_par_utilisateur
			<-- TRUE,
			final OF ouverture_fichier_projet_par_utilisateur <-- TRUE;
	  a_posteriori_detection_idle
		IF ((((NOT required OF ouverture_fichier_projet_par_utilisateur)
		   AND (NOT detected OF
		  ouverture_fichier_projet_par_utilisateur)) AND relevant_evt
		  OF ouverture_fichier_projet_par_utilisateur) AND S OF
		  ouverture_fichier_projet_par_utilisateur) AND active OF
		  ouverture_fichier_projet_par_utilisateur
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "idle final detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF ouverture_fichier_projet_par_utilisateur
			<-- TRUE;

OBJECT prise_en_main_signaux_controle_par_pirate IS_A or_gate;
	INTERFACE
	  sons
		= sys_300 syst_400;
	  fathers
		= Sabotage;
	  triggered_by
		= SCADA_system_compromised;
	  triggers
		= destruction_ralentissement;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF prise_en_main_signaux_controle_par_pirate <--
		  S OF prise_en_main_signaux_controle_par_pirate;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF Sabotage) OR (NOT S OF
		  SCADA_system_compromised)
		THEN required OF prise_en_main_signaux_controle_par_pirate <--
		  FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF Sabotage AND (NOT S OF Sabotage)) OR (
		  relevant_evt OF destruction_ralentissement AND (NOT S OF
		  destruction_ralentissement))
		THEN relevant_evt OF prise_en_main_signaux_controle_par_pirate
		  <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (detected OF sys_300 OR detected OF syst_400) OR detected OF
		  Sabotage
		THEN detected OF prise_en_main_signaux_controle_par_pirate <--
		  TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF prise_en_main_signaux_controle_par_pirate
		THEN final OF prise_en_main_signaux_controle_par_pirate <--
		  TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF SCADA_system_compromised AND final OF Sabotage
		THEN final OF prise_en_main_signaux_controle_par_pirate <--
		  TRUE;
	  or
		GROUP simu_group
		STEP propagate_effect_S
		IF (S OF sys_300 AND final OF sys_300) OR (S OF syst_400 AND
		  final OF syst_400)
		THEN S OF prise_en_main_signaux_controle_par_pirate <-- TRUE,
		  final OF prise_en_main_signaux_controle_par_pirate <-- TRUE;

OBJECT recheche_WinCC IS_A aa_leaf;
	INTERFACE
	  fathers
		= infection_BD;
	  triggers
		= connection_BD_via_pwd;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF recheche_WinCC <-- S OF recheche_WinCC;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF infection_BD
		THEN required OF recheche_WinCC <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF infection_BD AND (NOT S OF infection_BD))
		  OR (relevant_evt OF connection_BD_via_pwd AND (NOT S OF
		  connection_BD_via_pwd))
		THEN relevant_evt OF recheche_WinCC <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF infection_BD
		THEN detected OF recheche_WinCC <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF recheche_WinCC
		THEN final OF recheche_WinCC <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF recheche_WinCC = TRUE
		THEN S OF recheche_WinCC <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF recheche_WinCC = TRUE) AND required OF
		  recheche_WinCC
		THEN S OF recheche_WinCC <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF recheche_WinCC = FALSE) AND (((required OF
		  recheche_WinCC AND (NOT detected OF recheche_WinCC)) AND (
		  NOT S OF recheche_WinCC)) AND relevant_evt OF recheche_WinCC)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF recheche_WinCC <-- TRUE;
	  success_detected
		IF (aa_success OF recheche_WinCC = FALSE) AND (((required OF
		  recheche_WinCC AND detected OF recheche_WinCC) AND (NOT S OF
		  recheche_WinCC)) AND relevant_evt OF recheche_WinCC)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF recheche_WinCC <-- TRUE;
	  initial_detection
		IF ((((required OF recheche_WinCC AND (NOT detected OF
		  recheche_WinCC)) AND relevant_evt OF recheche_WinCC) AND (
		  NOT flagI OF recheche_WinCC)) AND (NOT S OF recheche_WinCC))
		  AND final OF infection_BD
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF recheche_WinCC <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF recheche_WinCC <-- TRUE;
	  ongoing_detection
		IF ((required OF recheche_WinCC AND (NOT detected OF
		  recheche_WinCC)) AND relevant_evt OF recheche_WinCC) AND (
		  NOT S OF recheche_WinCC)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF recheche_WinCC <-- TRUE;
	  final_detection
		IF (((required OF recheche_WinCC AND (NOT detected OF
		  recheche_WinCC)) AND relevant_evt OF recheche_WinCC) AND S
		  OF recheche_WinCC) AND (NOT flagF OF recheche_WinCC)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF recheche_WinCC <-- TRUE,
			final OF recheche_WinCC <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF recheche_WinCC <-- TRUE,
			final OF recheche_WinCC <-- TRUE;
	  a_posteriori_detection
		IF ((required OF recheche_WinCC AND (NOT detected OF
		  recheche_WinCC)) AND relevant_evt OF recheche_WinCC) AND S
		  OF recheche_WinCC
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF recheche_WinCC <-- TRUE;

OBJECT rename_replace_Lib IS_A aa_leaf;
	INTERFACE
	  fathers
		= PLC_compromised;
	  triggered_by
		= Load_Lib;
	  triggers
		= Check_PLC_CFG check_config;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF rename_replace_Lib <-- S OF
		  rename_replace_Lib;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF PLC_compromised) OR (NOT S OF Load_Lib)
		THEN required OF rename_replace_Lib <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF PLC_compromised AND (NOT S OF
		  PLC_compromised)) OR ((relevant_evt OF Check_PLC_CFG AND (
		  NOT S OF Check_PLC_CFG)) OR (relevant_evt OF check_config
		  AND (NOT S OF check_config)))
		THEN relevant_evt OF rename_replace_Lib <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF PLC_compromised
		THEN detected OF rename_replace_Lib <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF rename_replace_Lib
		THEN final OF rename_replace_Lib <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF rename_replace_Lib = TRUE
		THEN S OF rename_replace_Lib <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF rename_replace_Lib = TRUE) AND required OF
		  rename_replace_Lib
		THEN S OF rename_replace_Lib <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF rename_replace_Lib = FALSE) AND (((required
		  OF rename_replace_Lib AND (NOT detected OF
		  rename_replace_Lib)) AND (NOT S OF rename_replace_Lib)) AND
		  relevant_evt OF rename_replace_Lib)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF rename_replace_Lib <-- TRUE;
	  success_detected
		IF (aa_success OF rename_replace_Lib = FALSE) AND (((required
		  OF rename_replace_Lib AND detected OF rename_replace_Lib)
		  AND (NOT S OF rename_replace_Lib)) AND relevant_evt OF
		  rename_replace_Lib)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF rename_replace_Lib <-- TRUE;
	  initial_detection
		IF (((((required OF rename_replace_Lib AND (NOT detected OF
		  rename_replace_Lib)) AND relevant_evt OF rename_replace_Lib)
		  AND (NOT flagI OF rename_replace_Lib)) AND (NOT S OF
		  rename_replace_Lib)) AND final OF Load_Lib) AND final OF
		  PLC_compromised
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF rename_replace_Lib <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF rename_replace_Lib <-- TRUE;
	  ongoing_detection
		IF ((required OF rename_replace_Lib AND (NOT detected OF
		  rename_replace_Lib)) AND relevant_evt OF rename_replace_Lib)
		  AND (NOT S OF rename_replace_Lib)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF rename_replace_Lib <-- TRUE;
	  final_detection
		IF (((required OF rename_replace_Lib AND (NOT detected OF
		  rename_replace_Lib)) AND relevant_evt OF rename_replace_Lib)
		  AND S OF rename_replace_Lib) AND (NOT flagF OF
		  rename_replace_Lib)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF rename_replace_Lib <-- TRUE,
			final OF rename_replace_Lib <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF rename_replace_Lib <-- TRUE,
			final OF rename_replace_Lib <-- TRUE;
	  a_posteriori_detection
		IF ((required OF rename_replace_Lib AND (NOT detected OF
		  rename_replace_Lib)) AND relevant_evt OF rename_replace_Lib)
		  AND S OF rename_replace_Lib
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF rename_replace_Lib <-- TRUE;

OBJECT self_installation IS_A and_gate;
	INTERFACE
	  sons
		= Modification_systeme escalation_of_preveleges execution_module_principal systeme_Windows_infecte;
	  fathers
		= Network_compromised;
	  triggered_by
		= infiltration;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF self_installation <-- S OF self_installation;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF Network_compromised) OR (NOT S OF
		  infiltration)
		THEN required OF self_installation <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF Network_compromised AND (NOT S OF
		  Network_compromised)
		THEN relevant_evt OF self_installation <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (((detected OF Modification_systeme OR detected OF
		  escalation_of_preveleges) OR detected OF
		  execution_module_principal) OR detected OF
		  systeme_Windows_infecte) OR detected OF Network_compromised
		THEN detected OF self_installation <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF self_installation
		THEN final OF self_installation <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF infiltration AND final OF Network_compromised
		THEN final OF self_installation <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF (((S OF Modification_systeme AND final OF
		  Modification_systeme) AND (S OF escalation_of_preveleges AND
		  final OF escalation_of_preveleges)) AND (S OF
		  execution_module_principal AND final OF
		  execution_module_principal)) AND (S OF
		  systeme_Windows_infecte AND final OF systeme_Windows_infecte)
		THEN S OF self_installation <-- TRUE,
		  final OF self_installation <-- TRUE;

OBJECT successful_attack IS_A and_gate;
	INTERFACE
	  sons
		= Attack_industrial_system Network_compromised;
	  fathers
		= Stuxnet;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF successful_attack <-- S OF successful_attack;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF Stuxnet
		THEN required OF successful_attack <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF Stuxnet AND (NOT S OF Stuxnet)
		THEN relevant_evt OF successful_attack <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (detected OF Attack_industrial_system OR detected OF
		  Network_compromised) OR detected OF Stuxnet
		THEN detected OF successful_attack <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF successful_attack
		THEN final OF successful_attack <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF Stuxnet
		THEN final OF successful_attack <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF (S OF Attack_industrial_system AND final OF
		  Attack_industrial_system) AND (S OF Network_compromised AND
		  final OF Network_compromised)
		THEN S OF successful_attack <-- TRUE,
		  final OF successful_attack <-- TRUE;

OBJECT sys_300 IS_A and_gate;
	INTERFACE
	  sons
		= Flag_sys_300 PLC_envoie_donnees_falcifiees_aux_variateurs collecte_de_donnees;
	  fathers
		= prise_en_main_signaux_controle_par_pirate;
	  triggered_by
		= Flag_sys_300;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF sys_300 <-- S OF sys_300;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF prise_en_main_signaux_controle_par_pirate)
		  OR (NOT S OF Flag_sys_300)
		THEN required OF sys_300 <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF prise_en_main_signaux_controle_par_pirate
		  AND (NOT S OF prise_en_main_signaux_controle_par_pirate)
		THEN relevant_evt OF sys_300 <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (detected OF PLC_envoie_donnees_falcifiees_aux_variateurs OR
		  detected OF collecte_de_donnees) OR detected OF
		  prise_en_main_signaux_controle_par_pirate
		THEN detected OF sys_300 <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF sys_300
		THEN final OF sys_300 <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF Flag_sys_300 AND final OF
		  prise_en_main_signaux_controle_par_pirate
		THEN final OF sys_300 <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF ((S OF Flag_sys_300 AND final OF Flag_sys_300) AND (S OF
		  PLC_envoie_donnees_falcifiees_aux_variateurs AND final OF
		  PLC_envoie_donnees_falcifiees_aux_variateurs)) AND (S OF
		  collecte_de_donnees AND final OF collecte_de_donnees)
		THEN S OF sys_300 <-- TRUE,
		  final OF sys_300 <-- TRUE;

OBJECT syst_400 IS_A and_gate;
	INTERFACE
	  sons
		= Flag_sys_400 falcifier_signaux_sortie intercepter_signaux_entree_sortie_PLC;
	  fathers
		= prise_en_main_signaux_controle_par_pirate;
	  triggered_by
		= Flag_sys_400;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF syst_400 <-- S OF syst_400;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF prise_en_main_signaux_controle_par_pirate)
		  OR (NOT S OF Flag_sys_400)
		THEN required OF syst_400 <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF prise_en_main_signaux_controle_par_pirate
		  AND (NOT S OF prise_en_main_signaux_controle_par_pirate)
		THEN relevant_evt OF syst_400 <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (detected OF falcifier_signaux_sortie OR detected OF
		  intercepter_signaux_entree_sortie_PLC) OR detected OF
		  prise_en_main_signaux_controle_par_pirate
		THEN detected OF syst_400 <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF syst_400
		THEN final OF syst_400 <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF Flag_sys_400 AND final OF
		  prise_en_main_signaux_controle_par_pirate
		THEN final OF syst_400 <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF ((S OF Flag_sys_400 AND final OF Flag_sys_400) AND (S OF
		  falcifier_signaux_sortie AND final OF
		  falcifier_signaux_sortie)) AND (S OF
		  intercepter_signaux_entree_sortie_PLC AND final OF
		  intercepter_signaux_entree_sortie_PLC)
		THEN S OF syst_400 <-- TRUE,
		  final OF syst_400 <-- TRUE;

OBJECT systeme_Windows_infecte IS_A or_gate;
	INTERFACE
	  sons
		= infection_BD infection_fichiers_projets_WinCC_Step7;
	  fathers
		= self_installation;
	  triggered_by
		= execution_module_principal;
	  triggers
		= Modification_systeme;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF systeme_Windows_infecte <-- S OF
		  systeme_Windows_infecte;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF self_installation) OR (NOT S OF
		  execution_module_principal)
		THEN required OF systeme_Windows_infecte <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF self_installation AND (NOT S OF
		  self_installation)) OR (relevant_evt OF Modification_systeme
		  AND (NOT S OF Modification_systeme))
		THEN relevant_evt OF systeme_Windows_infecte <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (detected OF infection_BD OR detected OF
		  infection_fichiers_projets_WinCC_Step7) OR detected OF
		  self_installation
		THEN detected OF systeme_Windows_infecte <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF systeme_Windows_infecte
		THEN final OF systeme_Windows_infecte <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF execution_module_principal AND final OF
		  self_installation
		THEN final OF systeme_Windows_infecte <-- TRUE;
	  or
		GROUP simu_group
		STEP propagate_effect_S
		IF (S OF infection_BD AND final OF infection_BD) OR (S OF
		  infection_fichiers_projets_WinCC_Step7 AND final OF
		  infection_fichiers_projets_WinCC_Step7)
		THEN S OF systeme_Windows_infecte <-- TRUE,
		  final OF systeme_Windows_infecte <-- TRUE;

OBJECT t_1 IS_A trigger_link;
	INTERFACE
	  target
		= self_installation;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_10 IS_A trigger_link;
	INTERFACE
	  target
		= Decrypt_data;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_11 IS_A trigger_link;
	INTERFACE
	  target
		= load_Exec_malware;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_11_1 IS_A trigger_link;
	INTERFACE
	  target
		= falcifier_signaux_sortie;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_12 IS_A trigger_link;
	INTERFACE
	  target
		= Modification_systeme;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_12_1 IS_A trigger_link;
	INTERFACE
	  target
		= destruction_ralentissement;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_13 IS_A trigger_link;
	INTERFACE
	  target
		= inject_code_processus;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_13_1 IS_A trigger_link;
	INTERFACE
	  target
		= cascade_centrifugeuses;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_14 IS_A trigger_link;
	INTERFACE
	  target
		= filtrer_fichier.lnk;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_14_1 IS_A trigger_link;
	INTERFACE
	  target
		= PLC_envoie_donnees_falcifiees_aux_variateurs;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_15 IS_A trigger_link;
	INTERFACE
	  target
		= cacher_presence_fichiers_malvaillants;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_16 IS_A trigger_link;
	INTERFACE
	  target
		= sys_300;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_17 IS_A trigger_link;
	INTERFACE
	  target
		= syst_400;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_1_1 IS_A trigger_link;
	INTERFACE
	  target
		= execution_module_principal;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_1_2 IS_A trigger_link;
	INTERFACE
	  target
		= PLC_compromised;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_2 IS_A trigger_link;
	INTERFACE
	  target
		= Proliferation_et_MAJ;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_2_1 IS_A trigger_link;
	INTERFACE
	  target
		= Load_Lib;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_3 IS_A trigger_link;
	INTERFACE
	  target
		= systeme_Windows_infecte;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_3_1 IS_A trigger_link;
	INTERFACE
	  target
		= rename_replace_Lib;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_4 IS_A trigger_link;
	INTERFACE
	  target
		= Attack_industrial_system;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_4_2 IS_A trigger_link;
	INTERFACE
	  target
		= modify_PLC_function_bloks;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_5_1 IS_A trigger_link;
	INTERFACE
	  target
		= check_config;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_6 IS_A trigger_link;
	INTERFACE
	  target
		= user_USB_key_execution;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_6_1 IS_A trigger_link;
	INTERFACE
	  target
		= connection_BD_via_pwd;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_6_2 IS_A trigger_link;
	INTERFACE
	  target
		= Check_PLC_CFG;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_7_1 IS_A trigger_link;
	INTERFACE
	  target
		= evoie_code_malveillant_via_SQL_req;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_7_2 IS_A trigger_link;
	INTERFACE
	  target
		= prise_en_main_signaux_controle_par_pirate;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_8 IS_A trigger_link;
	INTERFACE
	  target
		= exec_code_malveillant;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT t_9 IS_A trigger_link;
	INTERFACE
	  target
		= Load_DLL;
	CONSTANT
	  trigger_kind
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';

OBJECT task_planner IS_A aa_leaf;
	INTERFACE
	  fathers
		= escalation_of_preveleges;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF task_planner <-- S OF task_planner;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF escalation_of_preveleges
		THEN required OF task_planner <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF escalation_of_preveleges AND (NOT S OF
		  escalation_of_preveleges)
		THEN relevant_evt OF task_planner <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF escalation_of_preveleges
		THEN detected OF task_planner <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF task_planner
		THEN final OF task_planner <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF task_planner = TRUE
		THEN S OF task_planner <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF task_planner = TRUE) AND required OF
		  task_planner
		THEN S OF task_planner <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF task_planner = FALSE) AND (((required OF
		  task_planner AND (NOT detected OF task_planner)) AND (NOT S
		  OF task_planner)) AND relevant_evt OF task_planner)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF task_planner <-- TRUE;
	  success_detected
		IF (aa_success OF task_planner = FALSE) AND (((required OF
		  task_planner AND detected OF task_planner) AND (NOT S OF
		  task_planner)) AND relevant_evt OF task_planner)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF task_planner <-- TRUE;
	  initial_detection
		IF ((((required OF task_planner AND (NOT detected OF
		  task_planner)) AND relevant_evt OF task_planner) AND (NOT
		  flagI OF task_planner)) AND (NOT S OF task_planner)) AND
		  final OF escalation_of_preveleges
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF task_planner <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF task_planner <-- TRUE;
	  ongoing_detection
		IF ((required OF task_planner AND (NOT detected OF task_planner)
		  ) AND relevant_evt OF task_planner) AND (NOT S OF
		  task_planner)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF task_planner <-- TRUE;
	  final_detection
		IF (((required OF task_planner AND (NOT detected OF
		  task_planner)) AND relevant_evt OF task_planner) AND S OF
		  task_planner) AND (NOT flagF OF task_planner)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF task_planner <-- TRUE,
			final OF task_planner <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF task_planner <-- TRUE,
			final OF task_planner <-- TRUE;
	  a_posteriori_detection
		IF ((required OF task_planner AND (NOT detected OF task_planner)
		  ) AND relevant_evt OF task_planner) AND S OF task_planner
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF task_planner <-- TRUE;

OBJECT user_USB_key_execution IS_A tse_leaf;
	INTERFACE
	  fathers
		= via_removable_media;
	  triggered_by
		= windows_vuln_exploitation;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  lambda_S_ND_idle
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D_idle
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I_idle
		DOMAIN REAL
		= 0;
	  lambda_D_O_idle
		DOMAIN REAL
		= 0;
	  gamma_D_F_idle
		DOMAIN REAL
		= 0;
	  lambda_D_A_idle
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	  flagIi
		DOMAIN BOOLEAN
		= FALSE;
	  flagFi
		DOMAIN BOOLEAN
		= FALSE;
	  active
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  tse_real
		LABEL "realization of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF user_USB_key_execution <-- S OF
		  user_USB_key_execution;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF (NOT required OF via_removable_media) OR (NOT S OF
		  windows_vuln_exploitation)
		THEN required OF user_USB_key_execution <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF via_removable_media AND (NOT S OF
		  via_removable_media)
		THEN relevant_evt OF user_USB_key_execution <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF via_removable_media
		THEN detected OF user_USB_key_execution <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF user_USB_key_execution
		THEN final OF user_USB_key_execution <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF tse_real OF user_USB_key_execution = TRUE
		THEN S OF user_USB_key_execution <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (tse_real OF user_USB_key_execution = TRUE) AND required OF
		  user_USB_key_execution
		THEN S OF user_USB_key_execution <-- TRUE;
	  activation
		GROUP simu_group
		STEP tops
		IF required OF user_USB_key_execution
		THEN active OF user_USB_key_execution <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (tse_real OF user_USB_key_execution = FALSE) AND ((((
		  required OF user_USB_key_execution AND (NOT detected OF
		  user_USB_key_execution)) AND (NOT S OF
		  user_USB_key_execution)) AND active OF
		  user_USB_key_execution) AND relevant_evt OF
		  user_USB_key_execution)
		MAY_OCCUR
		  FAULT tse_real
		  LABEL "realization undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING tse_real OF user_USB_key_execution <-- TRUE;
	  success_detected
		IF (tse_real OF user_USB_key_execution = FALSE) AND ((((
		  required OF user_USB_key_execution AND detected OF
		  user_USB_key_execution) AND (NOT S OF user_USB_key_execution)
		  ) AND active OF user_USB_key_execution) AND relevant_evt OF
		  user_USB_key_execution)
		MAY_OCCUR
		  FAULT tse_real
		  LABEL "realization detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING tse_real OF user_USB_key_execution <-- TRUE;
	  initial_detection
		IF ((((((required OF user_USB_key_execution AND (NOT detected
		  OF user_USB_key_execution)) AND relevant_evt OF
		  user_USB_key_execution) AND (NOT S OF user_USB_key_execution)
		  ) AND (NOT flagI OF user_USB_key_execution)) AND active OF
		  user_USB_key_execution) AND final OF
		  windows_vuln_exploitation) AND final OF via_removable_media
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF user_USB_key_execution <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF user_USB_key_execution <-- TRUE;
	  ongoing_detection
		IF (((required OF user_USB_key_execution AND (NOT detected OF
		  user_USB_key_execution)) AND relevant_evt OF
		  user_USB_key_execution) AND (NOT S OF user_USB_key_execution)
		  ) AND active OF user_USB_key_execution
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF user_USB_key_execution <-- TRUE;
	  final_detection
		IF ((((required OF user_USB_key_execution AND (NOT detected OF
		  user_USB_key_execution)) AND relevant_evt OF
		  user_USB_key_execution) AND S OF user_USB_key_execution) AND
		  (NOT flagF OF user_USB_key_execution)) AND active OF
		  user_USB_key_execution
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF user_USB_key_execution <-- TRUE,
			final OF user_USB_key_execution <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF user_USB_key_execution <-- TRUE,
			final OF user_USB_key_execution <-- TRUE;
	  a_posteriori_detection
		IF (((required OF user_USB_key_execution AND (NOT detected OF
		  user_USB_key_execution)) AND relevant_evt OF
		  user_USB_key_execution) AND S OF user_USB_key_execution) AND
		  active OF user_USB_key_execution
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF user_USB_key_execution <-- TRUE;
	  success_undetected_idle
		IF (tse_real OF user_USB_key_execution = FALSE) AND (((((NOT
		  required OF user_USB_key_execution) AND (NOT detected OF
		  user_USB_key_execution)) AND relevant_evt OF
		  user_USB_key_execution) AND (NOT S OF user_USB_key_execution)
		  ) AND active OF user_USB_key_execution)
		MAY_OCCUR
		  FAULT tse_real
		  LABEL "idle realization undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING tse_real OF user_USB_key_execution <-- TRUE;
	  success_detected_idle
		IF (tse_real OF user_USB_key_execution = FALSE) AND (((((NOT
		  required OF user_USB_key_execution) AND detected OF
		  user_USB_key_execution) AND relevant_evt OF
		  user_USB_key_execution) AND (NOT S OF user_USB_key_execution)
		  ) AND active OF user_USB_key_execution)
		MAY_OCCUR
		  FAULT tse_real
		  LABEL "idle realization detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING tse_real OF user_USB_key_execution <-- TRUE;
	  initial_detection_idle
		IF (((((((NOT required OF user_USB_key_execution) AND (NOT
		  detected OF user_USB_key_execution)) AND relevant_evt OF
		  user_USB_key_execution) AND (NOT S OF user_USB_key_execution)
		  ) AND (NOT flagIi OF user_USB_key_execution)) AND active OF
		  user_USB_key_execution) AND final OF
		  windows_vuln_exploitation) AND final OF via_removable_media
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagIi OF user_USB_key_execution <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "idle initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF user_USB_key_execution <-- TRUE;
	  ongoing_detection_idle
		IF ((((NOT required OF user_USB_key_execution) AND (NOT
		  detected OF user_USB_key_execution)) AND relevant_evt OF
		  user_USB_key_execution) AND (NOT S OF user_USB_key_execution)
		  ) AND active OF user_USB_key_execution
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "idle ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF user_USB_key_execution <-- TRUE;
	  final_detection_idle
		IF (((((NOT required OF user_USB_key_execution) AND (NOT
		  detected OF user_USB_key_execution)) AND relevant_evt OF
		  user_USB_key_execution) AND S OF user_USB_key_execution) AND
		  (NOT flagFi OF user_USB_key_execution)) AND active OF
		  user_USB_key_execution
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagFi OF user_USB_key_execution <-- TRUE,
			final OF user_USB_key_execution <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "idle final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF user_USB_key_execution <-- TRUE,
			final OF user_USB_key_execution <-- TRUE;
	  a_posteriori_detection_idle
		IF ((((NOT required OF user_USB_key_execution) AND (NOT
		  detected OF user_USB_key_execution)) AND relevant_evt OF
		  user_USB_key_execution) AND S OF user_USB_key_execution) AND
		  active OF user_USB_key_execution
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "idle final detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF user_USB_key_execution <-- TRUE;

OBJECT variation_vitesse_rotation IS_A aa_leaf;
	INTERFACE
	  fathers
		= destruction_ralentissement;
	  triggers
		= cascade_centrifugeuses;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	CONSTANT
	  lambda_S_ND
		DOMAIN REAL
		= 0.0001;
	  lambda_S_D
		DOMAIN REAL
		= 0.0001;
	  gamma_D_I
		DOMAIN REAL
		= 0;
	  lambda_D_O
		DOMAIN REAL
		= 0;
	  gamma_D_F
		DOMAIN REAL
		= 0;
	  lambda_D_A
		DOMAIN REAL
		= 0;
	  skill
		DOMAIN '0' '1' '2' '3' '4'
		= '0';
	  insider
		DOMAIN BOOLEAN
		= FALSE;
	  equipment
		DOMAIN BOOLEAN
		= FALSE;
	  cost
		DOMAIN REAL
		= 0;
	ATTRIBUTE
	  flagI
		DOMAIN BOOLEAN
		= FALSE;
	  flagF
		DOMAIN BOOLEAN
		= FALSE;
	(*FAILURE*)
	ATTRIBUTE
	  aa_success
		LABEL "success of step %OBJECT"
		DOMAIN BOOLEAN
		= FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF variation_vitesse_rotation <-- S OF
		  variation_vitesse_rotation;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF destruction_ralentissement
		THEN required OF variation_vitesse_rotation <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF destruction_ralentissement AND (NOT S OF
		  destruction_ralentissement)) OR (relevant_evt OF
		  cascade_centrifugeuses AND (NOT S OF cascade_centrifugeuses))
		THEN relevant_evt OF variation_vitesse_rotation <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF detected OF destruction_ralentissement
		THEN detected OF variation_vitesse_rotation <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF variation_vitesse_rotation
		THEN final OF variation_vitesse_rotation <-- TRUE;
	  fails
		GROUP simu_group
		STEP initialization
		IF aa_success OF variation_vitesse_rotation = TRUE
		THEN S OF variation_vitesse_rotation <-- TRUE;
	  define_S
		GROUP simu_group
		STEP propagate_effect_S
		IF (aa_success OF variation_vitesse_rotation = TRUE) AND
		  required OF variation_vitesse_rotation
		THEN S OF variation_vitesse_rotation <-- TRUE;
	OCCURRENCE
	  success_undetected
		IF (aa_success OF variation_vitesse_rotation = FALSE) AND (((
		  required OF variation_vitesse_rotation AND (NOT detected OF
		  variation_vitesse_rotation)) AND (NOT S OF
		  variation_vitesse_rotation)) AND relevant_evt OF
		  variation_vitesse_rotation)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success undetected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF variation_vitesse_rotation <-- TRUE;
	  success_detected
		IF (aa_success OF variation_vitesse_rotation = FALSE) AND (((
		  required OF variation_vitesse_rotation AND detected OF
		  variation_vitesse_rotation) AND (NOT S OF
		  variation_vitesse_rotation)) AND relevant_evt OF
		  variation_vitesse_rotation)
		MAY_OCCUR
		  FAULT aa_success
		  LABEL "success detected of step %OBJECT"
		  DIST EXP (0.0001)
		  INDUCING aa_success OF variation_vitesse_rotation <-- TRUE;
	  initial_detection
		IF ((((required OF variation_vitesse_rotation AND (NOT detected
		  OF variation_vitesse_rotation)) AND relevant_evt OF
		  variation_vitesse_rotation) AND (NOT flagI OF
		  variation_vitesse_rotation)) AND (NOT S OF
		  variation_vitesse_rotation)) AND final OF
		  destruction_ralentissement
		MAY_OCCUR
		  TRANSITION no_detectionI
		  DIST INS (1)
		  INDUCING flagI OF variation_vitesse_rotation <-- TRUE
		OR_ELSE
		  TRANSITION detectionI
		  LABEL "initial detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF variation_vitesse_rotation <-- TRUE;
	  ongoing_detection
		IF ((required OF variation_vitesse_rotation AND (NOT detected
		  OF variation_vitesse_rotation)) AND relevant_evt OF
		  variation_vitesse_rotation) AND (NOT S OF
		  variation_vitesse_rotation)
		MAY_OCCUR
		  TRANSITION detectionO
		  LABEL "ongoing detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF variation_vitesse_rotation <-- TRUE;
	  final_detection
		IF (((required OF variation_vitesse_rotation AND (NOT detected
		  OF variation_vitesse_rotation)) AND relevant_evt OF
		  variation_vitesse_rotation) AND S OF
		  variation_vitesse_rotation) AND (NOT flagF OF
		  variation_vitesse_rotation)
		MAY_OCCUR
		  TRANSITION no_detectionF
		  DIST INS (1)
		  INDUCING flagF OF variation_vitesse_rotation <-- TRUE,
			final OF variation_vitesse_rotation <-- TRUE
		OR_ELSE
		  TRANSITION detectionF
		  LABEL "final detection of step %OBJECT"
		  DIST INS (0)
		  INDUCING detected OF variation_vitesse_rotation <-- TRUE,
			final OF variation_vitesse_rotation <-- TRUE;
	  a_posteriori_detection
		IF ((required OF variation_vitesse_rotation AND (NOT detected
		  OF variation_vitesse_rotation)) AND relevant_evt OF
		  variation_vitesse_rotation) AND S OF
		  variation_vitesse_rotation
		MAY_OCCUR
		  TRANSITION detectionA
		  LABEL "a posteriori detection of step %OBJECT"
		  DIST EXP (0)
		  INDUCING detected OF variation_vitesse_rotation <-- TRUE;

OBJECT via_LAN IS_A or_gate;
	INTERFACE
	  sons
		= Network_shares Printer_servers Service_Server_RPC;
	  fathers
		= infiltration;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF via_LAN <-- S OF via_LAN;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF infiltration
		THEN required OF via_LAN <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF infiltration AND (NOT S OF infiltration)
		THEN relevant_evt OF via_LAN <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF ((detected OF Network_shares OR detected OF Printer_servers)
		  OR detected OF Service_Server_RPC) OR detected OF
		  infiltration
		THEN detected OF via_LAN <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF via_LAN
		THEN final OF via_LAN <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF infiltration
		THEN final OF via_LAN <-- TRUE;
	  or
		GROUP simu_group
		STEP propagate_effect_S
		IF ((S OF Network_shares AND final OF Network_shares) OR (S OF
		  Printer_servers AND final OF Printer_servers)) OR (S OF
		  Service_Server_RPC AND final OF Service_Server_RPC)
		THEN S OF via_LAN <-- TRUE,
		  final OF via_LAN <-- TRUE;

OBJECT via_Simens_Project_Files IS_A or_gate;
	INTERFACE
	  sons
		= STEP7_Project_Fiels WinCC_SQL_ServerDB;
	  fathers
		= infiltration;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF via_Simens_Project_Files <-- S OF
		  via_Simens_Project_Files;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF infiltration
		THEN required OF via_Simens_Project_Files <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF infiltration AND (NOT S OF infiltration)
		THEN relevant_evt OF via_Simens_Project_Files <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (detected OF STEP7_Project_Fiels OR detected OF
		  WinCC_SQL_ServerDB) OR detected OF infiltration
		THEN detected OF via_Simens_Project_Files <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF via_Simens_Project_Files
		THEN final OF via_Simens_Project_Files <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF infiltration
		THEN final OF via_Simens_Project_Files <-- TRUE;
	  or
		GROUP simu_group
		STEP propagate_effect_S
		IF (S OF STEP7_Project_Fiels AND final OF STEP7_Project_Fiels)
		  OR (S OF WinCC_SQL_ServerDB AND final OF WinCC_SQL_ServerDB)
		THEN S OF via_Simens_Project_Files <-- TRUE,
		  final OF via_Simens_Project_Files <-- TRUE;

OBJECT via_removable_media IS_A and_gate;
	INTERFACE
	  sons
		= user_USB_key_execution windows_vuln_exploitation;
	  fathers
		= infiltration;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF via_removable_media <-- S OF
		  via_removable_media;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF infiltration
		THEN required OF via_removable_media <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF relevant_evt OF infiltration AND (NOT S OF infiltration)
		THEN relevant_evt OF via_removable_media <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (detected OF user_USB_key_execution OR detected OF
		  windows_vuln_exploitation) OR detected OF infiltration
		THEN detected OF via_removable_media <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF via_removable_media
		THEN final OF via_removable_media <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF infiltration
		THEN final OF via_removable_media <-- TRUE;
	  and
		GROUP simu_group
		STEP propagate_effect_S
		IF (S OF user_USB_key_execution AND final OF
		  user_USB_key_execution) AND (S OF windows_vuln_exploitation
		  AND final OF windows_vuln_exploitation)
		THEN S OF via_removable_media <-- TRUE,
		  final OF via_removable_media <-- TRUE;

OBJECT windows_vuln_exploitation IS_A or_gate;
	INTERFACE
	  sons
		= Win_Shell_Link_files_vuln autorun.inf_vuln;
	  fathers
		= via_removable_media;
	  triggers
		= user_USB_key_execution;
	ATTRIBUTE
	  required
		DOMAIN BOOLEAN
		REINITIALISATION TRUE;
	  detected
		DOMAIN BOOLEAN
		= FALSE;
	  final
		DOMAIN BOOLEAN
		= FALSE;
	  already_S
		DOMAIN BOOLEAN
		= FALSE;
	CONSTANT
	  detection
		DOMAIN 'disabled' 'global' 'local'
		= 'global';
	  calculate_required
		DOMAIN 'fn_fathers_and_trig' 'fn_fathers_opp_trig' 'always_true' 'always_false' 'equal_to_S_trig' 'opposite_to_S_trig'
		= 'fn_fathers_and_trig';
	  force_relevant_events
		DOMAIN BOOLEAN
		= FALSE;
	  transmit_relevance
		DOMAIN BOOLEAN
		= TRUE;
	ATTRIBUTE
	  S
		LABEL "%OBJECT"
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	  relevant_evt
		DOMAIN BOOLEAN
		REINITIALISATION FALSE;
	INTERACTION
	  mem_S
		GROUP simu_group
		STEP propagate_leaves
		THEN already_S OF windows_vuln_exploitation <-- S OF
		  windows_vuln_exploitation;
	  prop_req
		GROUP simu_group
		STEP propagate_effect_required
		IF NOT required OF via_removable_media
		THEN required OF windows_vuln_exploitation <-- FALSE;
	  prop_rel
		GROUP simu_group
		STEP propagate_effect_required
		IF (relevant_evt OF via_removable_media AND (NOT S OF
		  via_removable_media)) OR (relevant_evt OF
		  user_USB_key_execution AND (NOT S OF user_USB_key_execution))
		THEN relevant_evt OF windows_vuln_exploitation <-- TRUE;
	  prop_det
		GROUP simu_group
		STEP propagate_effect_detected
		IF (detected OF Win_Shell_Link_files_vuln OR detected OF
		  autorun.inf_vuln) OR detected OF via_removable_media
		THEN detected OF windows_vuln_exploitation <-- TRUE;
	  prop_final
		GROUP simu_group
		STEP initialization
		IF detected OF windows_vuln_exploitation
		THEN final OF windows_vuln_exploitation <-- TRUE;
	  prop_fin
		GROUP simu_group
		STEP initialization
		IF final OF via_removable_media
		THEN final OF windows_vuln_exploitation <-- TRUE;
	  or
		GROUP simu_group
		STEP propagate_effect_S
		IF (S OF Win_Shell_Link_files_vuln AND final OF
		  Win_Shell_Link_files_vuln) OR (S OF autorun.inf_vuln AND
		  final OF autorun.inf_vuln)
		THEN S OF windows_vuln_exploitation <-- TRUE,
		  final OF windows_vuln_exploitation <-- TRUE;

OBJECT __ARBRE__EIRM IS_A FIGARO;
	CONSTANT
	  Profil1
		DOMAIN BOOLEAN
		= TRUE;

